{"/home/travis/build/npmtest/node-npmtest-guvnor/test.js":"/* istanbul instrument in package npmtest_guvnor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-guvnor/lib.npmtest_guvnor.js":"/* istanbul instrument in package npmtest_guvnor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_guvnor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_guvnor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-guvnor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-guvnor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_guvnor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_guvnor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_guvnor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_guvnor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_guvnor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_guvnor.__dirname + '/lib.npmtest_guvnor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/index.js":"module.exports = {\n  Remote: require('./lib/remote'),\n  Local: require('./lib/local')\n}\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/remote/index.js":"var Container = require('wantsit').Container\nvar ObjectFactory = require('wantsit').ObjectFactory\n\nfunction createContainer (callback) {\n  var container = new Container()\n  container.register('logger', {})\n  container.register('config', {})\n  container.register('dnode', require('boss-dnode'))\n  container.register('tls', require('tls'))\n  container.register('semver', require('semver'))\n  container.createAndRegister('managedProcessFactory', ObjectFactory, [require('./RemoteProcess')])\n  container.createAndRegister('processStore', require('../common/Store'), ['managedProcessFactory'])\n  container.createAndRegister('managedAppFactory', ObjectFactory, [require('../common/ManagedApp')])\n  container.createAndRegister('appStore', require('../common/Store'), ['managedAppFactory'])\n  container.createAndRegister('crypto', require('../common/Crypto'))\n\n  container.once('ready', callback)\n}\n\nfunction findLogger () {\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n\n    if (arg.info && arg.warn && arg.error && arg.debug) {\n      return arg\n    }\n  }\n\n  return {\n    info: console.info.bind(console),\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    debug: function () {}\n  }\n}\n\nfunction findRemoteOptions () {\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n\n    if (arg.host && arg.port && arg.secret) {\n      return arg\n    }\n  }\n}\n\nmodule.exports = function () {\n  var args = Array.prototype.slice.apply(arguments)\n\n  createContainer(function (container) {\n    var callback = args[args.length - 1]\n\n    container._logger = findLogger.apply(null, args)\n\n    container.register('logger', findLogger.apply(null, args))\n\n    var remoteOptions = findRemoteOptions.apply(null, args)\n\n    if (!remoteOptions) {\n      return callback(new Error('Please pass an options object with your connection info'))\n    }\n\n    var host = remoteOptions.host\n    var port = remoteOptions.port\n    var secret = remoteOptions.secret\n    var principal = remoteOptions.user || 'root'\n    var timeout = remoteOptions.timeout || 10000\n    var rpcTimeout = remoteOptions.rpcTimeout === undefined ? 30000 : remoteOptions.rpcTimeout\n\n    container.create(require('./RemoteDaemon'), [host, port, principal, secret, timeout, rpcTimeout, callback], function (error, remoteDaemon) {\n      if (error) {\n        callback(error)\n      }\n\n      remoteDaemon.connect(callback)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/local/index.js":"var Container = require('wantsit').Container\nvar ObjectFactory = require('wantsit').ObjectFactory\n\nfunction createContainer (callback) {\n  var container = new Container()\n  container.register('logger', {})\n  container.register('config', {})\n  container.register('fs', require('fs'))\n  container.register('mkdirp', require('mkdirp'))\n  container.register('posix', require('posix'))\n  container.register('dnode', require('boss-dnode'))\n  container.register('freeport', require('freeport'))\n  container.register('child_process', require('child_process'))\n  container.register('semver', require('semver'))\n  container.createAndRegister('managedProcessFactory', ObjectFactory, [require('../common/ManagedProcess')])\n  container.createAndRegister('processStore', require('../common/Store'), ['managedProcessFactory'])\n  container.createAndRegister('managedAppFactory', ObjectFactory, [require('../common/ManagedApp')])\n  container.createAndRegister('appStore', require('../common/Store'), ['managedAppFactory'])\n  container.createAndRegister('localDaemonAdminConnection', require('./LocalDaemonConnection'), ['admin.socket'])\n  container.createAndRegister('localDaemonUserConnection', require('./LocalDaemonConnection'), ['user.socket'])\n  container.createAndRegister('localDaemonStarter', require('./LocalDaemonStarter'))\n  container.createAndRegister('localDaemon', require('./LocalDaemon'))\n\n  container.once('ready', callback)\n}\n\nfunction findConfig () {\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n\n    if (arg.guvnor && arg.guvnor.rundir && arg.guvnor.logdir) {\n      return arg\n    }\n  }\n\n  // load default config\n  return require('rc')('guvnor/guvnor', require('path').resolve(__dirname, '../../guvnor'))\n}\n\nfunction findLogger () {\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n\n    if (arg.info && arg.warn && arg.error && arg.debug) {\n      return arg\n    }\n  }\n\n  return {\n    info: console.info.bind(console),\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    debug: function () {}\n  }\n}\n\nfunction findConfigAndLogger (container, args) {\n  var logger = findLogger.apply(null, args)\n  container.setLogger(logger)\n\n  container.register('config', findConfig.apply(null, args))\n  container.register('logger', logger)\n}\n\nmodule.exports = {\n  connect: function () {\n    var args = Array.prototype.slice.call(arguments)\n\n    createContainer(function (container) {\n      findConfigAndLogger.call(null, container, args)\n\n      container.find('localDaemon').connect(args[args.length - 1])\n    })\n  },\n  connectOrStart: function () {\n    var args = Array.prototype.slice.call(arguments)\n\n    createContainer(function (container) {\n      findConfigAndLogger.call(null, container, args)\n\n      container.find('localDaemon').connectOrStart(args[args.length - 1])\n    })\n  },\n  running: function () {\n    var args = Array.prototype.slice.call(arguments)\n\n    createContainer(function (container) {\n      findConfigAndLogger.call(null, container, args)\n\n      var callback = args[args.length - 1]\n\n      var connection = container.find('localDaemonUserConnection')\n      connection.connect({}, function (error) {\n        if (error && error.code === 'DAEMON_NOT_RUNNING') {\n          return process.nextTick(callback.bind(callback, false))\n        }\n\n        process.nextTick(callback.bind(callback, true))\n\n        connection.disconnect()\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Actions.js":"var Autowire = require('wantsit').Autowire\nvar async = require('async')\n\nvar Actions = function () {\n  this._connectOrStart = Autowire\n  this._logger = Autowire\n  this._config = Autowire\n  this._user = Autowire\n  this._group = Autowire\n}\n\nActions.prototype._parseStartProcessOpts = function (options) {\n  var opts = {\n    user: options.user || this._user.name,\n    group: options.group || this._group.name,\n    instances: options.instances || undefined,\n    name: options.name || undefined,\n    argv: options.argv || undefined,\n    execArgv: options.execArgv || undefined,\n    debug: options.debug || undefined,\n    env: options.env || process.env\n  }\n\n  // resolve conflict with commander's name() method\n  if (opts.name && typeof opts.name !== 'string') {\n    delete opts.name\n  }\n\n  for (var key in opts) {\n    if (opts[key] === undefined) {\n      delete opts[key]\n    }\n  }\n\n  return opts\n}\n\nActions.prototype._do = function (options, callback) {\n  this._connectOrStart(function (error, guvnor) {\n    if (error) {\n      throw error\n    }\n\n    this._logMessages(guvnor)\n\n    callback(guvnor)\n  }.bind(this))\n}\n\nActions.prototype._doAdmin = function (operation, options, callback) {\n  this._connectOrStart(function (error, guvnor) {\n    if (error) {\n      throw error\n    }\n\n    this._logMessages(guvnor)\n\n    if (guvnor[operation]) {\n      callback(guvnor)\n    } else {\n      this._logger.warn('You do not appear to have sufficient permissions')\n      guvnor.disconnect()\n    }\n  }.bind(this))\n}\n\nActions.prototype._logMessages = function (guvnor) {\n  guvnor.on('*', function () {\n    var args = []\n\n    Array.prototype.slice.call(arguments).forEach(function (arg) {\n      try {\n        var str = JSON.stringify(arg)\n\n        if (!str) {\n          return\n        }\n        var maxLength = 20000\n\n        args.push(str.length > maxLength ? str.substr(0, maxLength) + '...' : str)\n      } catch(e) {\n        args.push('Could not serialise - ' + e.message)\n      }\n    })\n\n    this._logger.debug.apply(this._logger, args)\n  }.bind(this))\n}\n\nActions.prototype._withEach = function (pidOrNames, options, withEach, afterAll) {\n  if (!Array.isArray(pidOrNames)) {\n    pidOrNames = [pidOrNames]\n  }\n\n  pidOrNames = pidOrNames.map(function (pidOrName) {\n    pidOrName = pidOrName.toString().trim()\n\n    // does it contain non-numeric characters?\n    if (pidOrName.match(/\\D/)) {\n      return pidOrName\n    }\n\n    // is it a number?\n    var pid = parseInt(pidOrName, 10)\n\n    return isNaN(pid) ? pidOrName : pid\n  })\n\n  afterAll = afterAll || function (errors) {\n    if (errors.length) {\n      throw errors[0]\n    }\n  }\n\n  this._do(options, function (guvnor) {\n    guvnor.listProcesses(function (error, processes) {\n      if (error) {\n        throw error\n      }\n\n      var tasks = []\n      var errors = []\n\n      pidOrNames.forEach(function (pidOrName) {\n        processes.forEach(function (managedProcess) {\n          var name = managedProcess.name\n\n          if (managedProcess.cluster) {\n            // remove the 'Cluster: ' from the cluster manager's name\n            name = name.substring('Cluster: '.length)\n          }\n\n          if (name === pidOrName || managedProcess.pid === pidOrName || pidOrName === '*') {\n            tasks.push(function (managedProcess, callback) {\n              withEach(managedProcess, guvnor, function (error) {\n                if (managedProcess && managedProcess.disconnect) {\n                  managedProcess.disconnect(function (error) {\n                    if (error) {\n                      this._logger.debug('Error disconnecting from remote process', managedProcess.name, error)\n                    } else {\n                      this._logger.debug('Disconnected from remote process', managedProcess.name)\n                    }\n                  }.bind(this))\n                }\n\n                if (error) {\n                  this._logger.debug(error)\n                  errors.push(error)\n                }\n\n                callback()\n              }.bind(this))\n            }.bind(this, managedProcess))\n          }\n        }.bind(this))\n      }.bind(this))\n\n      async.parallel(tasks, function (error) {\n        if (error) {\n          errors.push(error)\n        }\n\n        guvnor.disconnect(function () {\n          afterAll(errors)\n        })\n      })\n    }.bind(this))\n  }.bind(this))\n}\n\nmodule.exports = Actions\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Apps.js":"var Autowire = require('wantsit').Autowire\nvar util = require('util')\nvar Actions = require('./Actions')\nvar Table = require('./Table')\nvar OutputBuffer = require('output-buffer')\n\nvar Apps = function () {\n  Actions.call(this)\n\n  this._user = Autowire\n  this._processes = Autowire\n}\nutil.inherits(Apps, Actions)\n\nApps.prototype.installApplication = function (url, name, options) {\n  this._do(options, function (guvnor) {\n    var user = options.user || this._user.name\n\n    var infoBuffer = new OutputBuffer(console.info)\n    var errorBuffer = new OutputBuffer(function (line) {\n      console.error(line.red)\n    })\n\n    guvnor.deployApplication(name, url, user, infoBuffer.append.bind(infoBuffer), errorBuffer.append.bind(errorBuffer), function (error) {\n      infoBuffer.flush()\n      errorBuffer.flush()\n\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  }.bind(this))\n}\n\nApps.prototype.listApplications = function (options) {\n  this._do(options, function (guvnor) {\n    guvnor.listApplications(function (error, deployedApplications) {\n      if (error) {\n        throw error\n      }\n\n      var table = new Table('No applications have been installed')\n      table.addHeader(['Name', 'User', 'Ref', 'URL'])\n\n      deployedApplications.forEach(function (app) {\n        table.addRow([app.name, app.user, app.ref, app.url.grey])\n      })\n\n      table.print(console.info)\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nApps.prototype.removeApplication = function (name, options) {\n  this._do(options, function (guvnor) {\n    guvnor.removeApplication(name, function (error) {\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nApps.prototype.runApplication = function (name, ref, options) {\n  ref = ref || 'master'\n\n  this._do(options, function (guvnor) {\n    guvnor.switchApplicationRef(name, ref, console.info, console.error, function (error, applicationInfo) {\n      if (error) {\n        throw error\n      }\n\n      options.name = name\n      options.app = applicationInfo.id\n\n      this._processes.start(applicationInfo.path, options)\n    }.bind(this))\n  }.bind(this))\n}\n\nApps.prototype.listRefs = function (name, options) {\n  this._do(options, function (guvnor) {\n    guvnor.listApplicationRefs(name, function (error, refs) {\n      if (error) {\n        throw error\n      }\n\n      var table = new Table(name + ' has no refs')\n      table.addHeader(['Name', 'Commit'])\n\n      refs.forEach(function (ref) {\n        table.addRow([(ref.isTag ? ref.name.cyan : ref.name), ref.commit.grey])\n      })\n\n      table.print(console.info)\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nApps.prototype.updateRefs = function (name, options) {\n  this._do(options, function (guvnor) {\n    var infoBuffer = new OutputBuffer(console.info)\n    var errorBuffer = new OutputBuffer(function (line) {\n      console.error(line.red)\n    })\n\n    guvnor.updateApplicationRefs(name, infoBuffer.append.bind(infoBuffer), errorBuffer.append.bind(errorBuffer), function (error) {\n      infoBuffer.flush()\n      errorBuffer.flush()\n\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nApps.prototype.setRef = function (name, ref, options) {\n  this._do(options, function (guvnor) {\n    var infoBuffer = new OutputBuffer(console.info)\n    var errorBuffer = new OutputBuffer(function (line) {\n      console.error(line.red)\n    })\n\n    guvnor.switchApplicationRef(name, ref, infoBuffer.append.bind(infoBuffer), errorBuffer.append.bind(errorBuffer), function (error) {\n      infoBuffer.flush()\n      errorBuffer.flush()\n\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nApps.prototype.currentRef = function (name, options) {\n  this._do(options, function (guvnor) {\n    guvnor.currentRef(name, function (error, ref) {\n      if (error) {\n        throw error\n      }\n\n      console.info(ref)\n      guvnor.disconnect()\n    })\n  })\n}\n\nmodule.exports = Apps\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Table.js":"require('colors')\n\nvar stripAnsi = require('strip-ansi')\n\nvar Table = function (emptyMessage) {\n  this._rows = []\n\n  this._emptyMessage = emptyMessage\n  this._columnLengths = []\n}\n\nTable.prototype._calculateLengths = function (data) {\n  data.forEach(function (datum, index) {\n    var length = stripAnsi('' + datum).length\n\n    if (!this._columnLengths[index] || length > this._columnLengths[index]) {\n      this._columnLengths[index] = length\n    }\n  }.bind(this))\n}\n\nTable.prototype.addHeader = function (data) {\n  this._calculateLengths(data)\n\n  this._header = data\n}\n\nTable.prototype.addRow = function (data) {\n  this._calculateLengths(data)\n\n  this._rows.push(data)\n}\n\nTable.prototype.print = function (func) {\n  if (this._rows.length === 0) {\n    return func(this._emptyMessage.bold)\n  }\n\n  if (this._header) {\n    var output = ''\n\n    this._header.forEach(function (item, index) {\n      output += this._rpad(item, this._columnLengths[index]) + ' '\n    }.bind(this))\n\n    func(output.bold)\n  }\n\n  this._rows.forEach(function (row) {\n    var output = ''\n\n    row.forEach(function (item, index) {\n      output += this._rpad(item, this._columnLengths[index]) + ' '\n    }.bind(this))\n\n    output += ''\n\n    func(output)\n  }.bind(this))\n}\n\nTable.prototype._rpad = function (thing, len) {\n  if (thing === undefined || thing === null) {\n    thing = ''\n  } else {\n    thing = thing + ''\n  }\n\n  while (stripAnsi(thing).length < len) {\n    thing = thing + ' '\n  }\n\n  return thing\n}\n\nmodule.exports = Table\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/CLI.js":"var Autowire = require('wantsit').Autowire\nvar async = require('async')\nvar splitargs = require('splitargs')\nvar semver = require('semver')\n\nvar CLI = function () {\n  this._connectOrStart = Autowire\n  this._running = Autowire\n  this._logger = Autowire\n  this._config = Autowire\n  this._posix = Autowire\n  this._commander = Autowire\n  this._package = Autowire\n  this._execSync = Autowire\n  this._prompt = Autowire\n  this._running = Autowire\n  this._fs = Autowire\n  this._os = Autowire\n  this._child_process = Autowire\n  this._apps = Autowire\n  this._cluster = Autowire\n  this._daemon = Autowire\n  this._processes = Autowire\n  this._remote = Autowire\n\n  this._user = Autowire\n  this._group = Autowire\n}\n\nCLI.prototype.afterPropertiesSet = function () {\n  this._logger.debug('Loaded config from', this._config._rcfiles)\n\n  async.series([\n    this._checkNodeVersion.bind(this),\n    this._checkGuvnorUser.bind(this),\n    this._checkGuvnorGroup.bind(this)\n  ], function (error) {\n    if (error) {\n      throw error\n    }\n\n    this._setUpCommander()\n  }.bind(this))\n}\n\nCLI.prototype._setUpCommander = function () {\n  // var allowUnknownOptions = process.env.GUVNOR_ALLOW_UKNOWN_OPTION !== undefined\n  var allowUnknownOptions = true\n\n  this._commander\n    .version(this._package.version)\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('list')\n    .description('List all running processes')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.list.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('start <scriptOrAppName>')\n    .description('Start a process')\n    .option('-u, --user <user>', 'The user to start a process as')\n    .option('-g, --group <group>', 'The group to start a process as')\n    .option('-i, --instances <instances>', 'How many instances of the process to start', parseInt)\n    .option('-n, --name <name>', 'What name to give the process. If omitted and there is a package.json in the same directory as your script, it will be loaded and the name property used automatically.')\n    .option('-a, --argv <argv>', 'A space separated list of arguments to pass to a process', splitargs)\n    .option('-e, --execArgv <execArgv>', 'A space separated list of arguments to pass to the node executable', splitargs)\n    .option('-d, --debug', 'Pause the process at the start of execution and wait for a debugger to be attached')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.start.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('workers <pidOrName> <workers>')\n    .description('Set the number of workers managed by the cluster manager with the passed pid/name')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._cluster.setClusterWorkers.bind(this._cluster))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('stop <pidOrName...>')\n    .description('Stop one or more processes')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.stop.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('remove <pidOrName...>')\n    .description('Remove one or more processes')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.remove.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('restart <pidOrName...>')\n    .description('Restart one or more processes')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.restart.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('send <pidOrName> <event> [args...]')\n    .description('Causes process.emit(event, args[0], args[1]...) to occur in the process')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.send.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('heapdump <pidOrName>')\n    .description('Write out a snapshot of the processes memory for inspection')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.heapdump.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('gc <pidOrName>')\n    .description('Force garbage collection to occur in the process with the passed pid/name')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.gc.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('signal <pidOrName> <signal>')\n    .description('Sends a signal to a process (SIGUSR1, SIGINT, SIGHUP, SIGTERM, etc)')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.signal.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('write <pidOrName> <string>')\n    .description('Write a string to stdin of the managed process')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.write.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('logs [pidOrNames]')\n    .description('Show realtime process logs, optionally filtering by pid/name')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.logs.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('kill')\n    .description('Stop all processes and kill the daemon')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.kill.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('dump')\n    .description('Dumps process data to ' + this._config.guvnor.confdir + '/processes.json')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.dump.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('restore')\n    .description('Restores processes from ' + this._config.guvnor.confdir + '/processes.json')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.restore.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('config <path>')\n    .description('Print a config option')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.config.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('status')\n    .description('Returns whether the daemon is running or not')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._daemon.status.bind(this._daemon))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('remoteconfig [hostname]')\n    .description('Prints the remote host config for guvnor-web')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.remoteHostConfig.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('useradd <username>')\n    .description('Adds a user for use with guvnor-web')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.addRemoteUser.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('rmuser <username>')\n    .description('Removes a user from the guvnor-web user list')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.deleteRemoteUser.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('lsusers')\n    .description('Prints out all remote users')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.listRemoteUsers.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('reset <username>')\n    .description('Generate a new secret for the passed user')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.rotateRemoteUserKeys.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('genssl [days]')\n    .description('Generates self-signed SSL certificates for use between guvnor and guvnor-web that will expire in the passed number of days (defaults to 365)')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._remote.generateSSLCertificate.bind(this._remote))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('install <url> [appName]')\n    .description('Installs an application from a git repository')\n    .option('-u, --user <user>', 'The user to install as - n.b. the current user must be able to su to that user')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.installApplication.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('lsapps')\n    .description('List applications that have been deployed from git repositories')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.listApplications.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('rmapp <appName>')\n    .description('Remote deployed application')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.removeApplication.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('lsrefs <appName>')\n    .description('Lists app refs available to be started')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.listRefs.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('updaterefs <appName>')\n    .description('Updates app refs available to be started')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.updateRefs.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('setref <appName> <ref>')\n    .description('Checks out the app at the passed ref')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.setRef.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('ref <appName>')\n    .description('Prints the current ref of the passed app')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._apps.currentRef.bind(this._apps))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('web')\n    .description('Starts guvnor-web as a managed process')\n    .option('-u, --user <user>', 'The user to start a process as')\n    .option('-g, --group <group>', 'The group to start a process as')\n    .option('-d, --debug', 'Pause the process at the start of execution and wait for a debugger to be attached')\n    .option('-v, --verbose', 'Prints detailed internal logging output')\n    .action(this._processes.startWebMonitor.bind(this._processes))\n    .allowUnknownOption(allowUnknownOptions)\n\n  this._commander\n    .command('*')\n    .description('')\n    .action(this.unknown.bind(this))\n    .allowUnknownOption(allowUnknownOptions)\n\n  var program = this._commander.parse(process.argv)\n\n  // No command\n  if (program.rawArgs.reduce(function (previous, current) {\n      if (current.substring(0, 1) !== '-') {\n        return previous + 1\n      }\n\n      return previous\n    }, 0) === 2) {\n    this._processes.list()\n  }\n}\n\nCLI.prototype._checkNodeVersion = function (callback) {\n  var error\n\n  if (!semver.satisfies(process.versions.node, '>=' + this._config.guvnor.minnodeversion)) {\n    error = new Error('Please use node ' + this._config.guvnor.minnodeversion + ' or later')\n  }\n\n  callback(error)\n}\n\nCLI.prototype._checkGuvnorUser = function (callback) {\n  if (this._user.name === this._config.guvnor.user) {\n    return callback()\n  }\n\n  var guvnorGroup\n\n  try {\n    guvnorGroup = this._posix.getgrnam(this._config.guvnor.group)\n  } catch (e) {\n    if (e.message !== 'group id does not exist') {\n      return callback(e)\n    }\n\n    this._logger.error('Guvnor has been configured to run as %s:%s but the %s group does not exist.', this._config.guvnor.user, this._config.guvnor.group, this._config.guvnor.group)\n    this._logger.error('')\n    this._logger.error('To fix this run guvnor as %s and it will attempt to create the %s group.', this._config.guvnor.user, this._config.guvnor.group)\n    this._logger.error('')\n\n    return callback(new Error(this._config.guvnor.group + ' group does not exist'))\n  }\n\n  if (guvnorGroup.members.indexOf(this._user.name) === -1) {\n    this._logger.error('Guvnor has been configured to run as %s:%s but user %s is not in the group %s', this._config.guvnor.user, this._config.guvnor.group, this._user.name, this._config.guvnor.group)\n    this._logger.error('')\n\n    if (this._os.platform() === 'linux') {\n      this._logger.error('To fix this run:')\n      this._logger.error('')\n      this._logger.error('$ sudo usermod -G %s -a %s', this._config.guvnor.group, this._user.name)\n      this._logger.error('')\n    } else if (this._os.platform() === 'darwin') {\n      this._logger.error('To fix this run:')\n      this._logger.error('')\n      this._logger.error('$ sudo dscl . append /Groups/%s GroupMembership %s', this._config.guvnor.group, this._user.name)\n      this._logger.error('')\n    } else {\n      this._logger.error('To fix this add % to the % group.', this._user.name, this._config.guvnor.group)\n      this._logger.error('')\n    }\n\n    this._logger.error('Note you may need to log out and in again for the new group membership to take effect.')\n    this._logger.error('')\n\n    return callback(new Error('User is in the wrong group'))\n  }\n\n  this._running(function (running) {\n    callback(running ? undefined : new Error('The daemon is not running. Please run this command as ' + this._config.guvnor.user + ' to start the daemon.'))\n  }.bind(this))\n}\n\nCLI.prototype._checkGuvnorGroup = function (callback) {\n  try {\n    this._posix.getgrnam(this._config.guvnor.group)\n\n    return callback()\n  } catch (error) {\n    if (error.message === 'group id does not exist') {\n      this._logger.warn(\"Guvnor has been configured to start with the group '%s' but that group does not exist\", this._config.guvnor.group)\n      this._prompt.start()\n      this._prompt.get([{\n        name: \"create group '\" + this._config.guvnor.group + \"' [Y/n]\",\n        default: 'Y'\n      }], function (error) {\n        if (error) return callback(error)\n\n        this._logger.debug('Creating group', this._config.guvnor.group)\n\n        // ugh http://www.greenend.org.uk/rjk/tech/useradd.html\n\n        var command\n\n        // linux\n        try {\n          command = this._execSync('which groupadd').toString().trim()\n        } catch (e) {\n          this._logger.debug('which groupadd failed')\n        }\n\n        if (command) {\n          this._logger.debug('using groupadd', command)\n\n          command = command.toString() + ' ' + this._config.guvnor.group\n\n          this._logger.debug(command)\n\n          try {\n            this._execSync(command)\n          } catch (e) {\n            error = new Error('Automatically creating group ' + this._config.guvnor.group + ' failed, please create it manually')\n          }\n\n          return callback(error)\n        }\n\n        // mac os x\n        try {\n          command = this._execSync('which dscl').toString().trim()\n        } catch (e) {\n          this._logger.debug('which dscl failed')\n        }\n\n        if (command) {\n          this._logger.debug('using dscl', command)\n\n          // gids over 500 will appear in the system preferences window\n          var gid = 500\n\n          async.series([function (callback) {\n            this._child_process.exec(command + ' . -list /Groups PrimaryGroupID', function (error, stdout) {\n              if (error) return callback(error)\n\n              stdout.trim().split('\\n').forEach(function (line) {\n                line = line.replace(/\\s+/g, ' ')\n                var parts = line.split(' ')\n\n                var existingGid = parseInt(parts[1], 10)\n\n                if (gid === existingGid) {\n                  gid = existingGid + 1\n                }\n              })\n\n              this._logger.debug(this._config.guvnor.group + ' will have gid ' + gid)\n\n              callback()\n            }.bind(this))\n          }.bind(this), function (callback) {\n            this._child_process.exec(command + ' . create /Groups/' + this._config.guvnor.group, callback)\n          }.bind(this), function (callback) {\n            this._child_process.exec(command + ' . create /Groups/' + this._config.guvnor.group + ' name ' + this._config.guvnor.group, callback)\n          }.bind(this), function (callback) {\n            this._child_process.exec(command + ' . create /Groups/' + this._config.guvnor.group + ' passwd \"*\"', callback)\n          }.bind(this), function (callback) {\n            this._child_process.exec(command + ' . create /Groups/' + this._config.guvnor.group + ' gid ' + gid, callback)\n          }.bind(this), function (callback) {\n            this._fs.appendFile('/etc/group', this._config.guvnor.group + ':*:' + gid + ':\\n', callback)\n          }.bind(this)\n          ], callback)\n\n          return\n        }\n\n        callback(new Error('Automatically creating group ' + this._config.guvnor.group + ' failed, please create it manually'))\n      }.bind(this))\n    } else {\n      callback(error)\n    }\n  }\n}\n\nCLI.prototype.unknown = function () {\n  this._logger.error(\"Please specify a known subcommand. See '\" + this._commander.name() + \" --help' for commands.\")\n}\n\nmodule.exports = CLI\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Cluster.js":"var util = require('util')\nvar Actions = require('./Actions')\n\nvar Cluster = function () {\n  Actions.call(this)\n}\nutil.inherits(Cluster, Actions)\n\nCluster.prototype.setClusterWorkers = function (pidOrNames, workers, options) {\n  workers = parseInt(workers, 10)\n\n  if (isNaN(workers)) {\n    return this._logger.error('Please pass a number for cluster workers')\n  }\n\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Setting cluster workers to', workers)\n    managedProcess.setClusterWorkers(workers, done)\n  }.bind(this))\n}\n\nmodule.exports = Cluster\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/commander.js":"var commander = require('commander')\n\n// monkey patch until https://github.com/tj/commander.js/issues/289 is resolved\ncommander.normalize = function (args) {\n  var ret = []\n  var arg\n  var lastOpt\n  var index\n  var subcommand\n\n  // find subcommand - horrifically naive - just look for the first argument\n  // not prefixed with a dash\n  for (var i = 0, len = args.length; i < len; ++i) {\n    if (args[i].substring(0, 1) !== '-') {\n      subcommand = this.findCommand(args[i])\n\n      break\n    }\n  }\n\n  for (i = 0, len = args.length; i < len; ++i) {\n    arg = args[i]\n    if (i > 0) {\n      lastOpt = this.optionFor(subcommand, args[i - 1])\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i))\n      break\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg)\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function (c) {\n        ret.push('-' + c)\n      })\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1))\n    } else {\n      ret.push(arg)\n    }\n  }\n\n  return ret\n}\n\ncommander.findCommand = function (subcommand) {\n  if (!subcommand) {\n    return\n  }\n\n  for (var i = 0; i < this.commands.length; i++) {\n    if (this.commands[i]._name === subcommand) {\n      return this.commands[i]\n    }\n  }\n}\n\ncommander.optionFor = function (subcommand, arg) {\n  if (!subcommand) {\n    return null\n  }\n\n  var options = this.options\n\n  if (arguments.length === 1) {\n    // invoked as 'bs --foo'\n    arg = subcommand\n  } else {\n    // invoked as 'bs foo --bar'\n    options = subcommand.options\n  }\n\n  for (var i = 0, len = options.length; i < len; ++i) {\n    if (options[i].is(arg)) {\n      return options[i]\n    }\n  }\n}\n\nmodule.exports = commander\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Daemon.js":"var Autowire = require('wantsit').Autowire\nvar util = require('util')\nvar Actions = require('./Actions')\n\nvar Daemon = function () {\n  Actions.call(this)\n\n  this._running = Autowire\n  this._commander = Autowire\n}\nutil.inherits(Daemon, Actions)\n\nDaemon.prototype.config = function (path) {\n  var config = this._config\n  var value = null\n\n  path.split('.').forEach(function (section) {\n    config = config[section]\n    value = config\n  })\n\n  console.info(value)\n}\n\nDaemon.prototype.status = function () {\n  this._running(function (running) {\n    if (running) {\n      console.info('Daemon is running')\n    } else {\n      console.info('Daemon is not running')\n    }\n  })\n}\n\nDaemon.prototype.kill = function (options) {\n  if (arguments.length !== 1) {\n    this._logger.warn(\"You appear to have supplied arguments to '\" + this._commander._name + \" kill'.\")\n\n    if (!isNaN(parseInt(arguments[0], 10))) {\n      this._logger.warn(\"Did you perhaps mean '\" + this._commander._name + ' stop ' + arguments[0] + \"' instead?\")\n    }\n\n    this._logger.warn('Cowardly refusing to run.')\n\n    return\n  }\n\n  this._running(function (running) {\n    if (!running) {\n      return\n    }\n\n    this._doAdmin('kill', options, function (guvnor) {\n      this._logger.debug('Killing remote daemon')\n      guvnor.kill()\n      guvnor.disconnect()\n    }.bind(this))\n  }.bind(this))\n}\n\nDaemon.prototype.logs = function (pidOrNames, options) {\n  pidOrNames = pidOrNames || '*'\n\n  if (!Array.isArray(pidOrNames)) {\n    pidOrNames = [pidOrNames]\n  }\n\n  pidOrNames = pidOrNames.map(function (pidOrName) {\n    pidOrName = pidOrName.toString().trim()\n\n    // does it contain non-numeric characters?\n    if (pidOrName.match(/\\D/)) {\n      return pidOrName\n    }\n\n    // is it a number?\n    var pid = parseInt(pidOrName, 10)\n\n    return isNaN(pid) ? pidOrName : pid\n  })\n\n  var types = [\n    'process:log:error', 'process:log:info', 'process:log:warn', 'process:log:debug',\n    'worker:log:error', 'worker:log:info', 'worker:log:warn', 'worker:log:debug'\n  ]\n\n  this._do(options, function (guvnor) {\n    types.forEach(function (type) {\n      guvnor.on(type, function (type, managedProcess, log) {\n        var result = pidOrNames.some(function (pidOrName) {\n          if (pidOrName === '*' || pidOrName === managedProcess.name || pidOrName === managedProcess.pid) {\n            return true\n          }\n        })\n\n        if (!result) {\n          return\n        }\n\n        console.info('[%s] %s %s %s', managedProcess.pid, new Date(log.date), type, log.message)\n      }.bind(null, type))\n    })\n  })\n}\n\nDaemon.prototype.dump = function (options) {\n  this._do(options, function (guvnor) {\n    guvnor.dumpProcesses(function (error) {\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nDaemon.prototype.restore = function (options) {\n  this._do(options, function (guvnor) {\n    guvnor.restoreProcesses(function (error) {\n      if (error) {\n        throw error\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nmodule.exports = Daemon\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Processes.js":"var Autowire = require('wantsit').Autowire\nvar util = require('util')\nvar Actions = require('./Actions')\nvar Table = require('./Table')\nvar path = require('path')\n\nvar Processes = function () {\n  Actions.call(this)\n\n  this._moment = Autowire\n  this._formatMemory = Autowire\n  this._fs = Autowire\n}\nutil.inherits(Processes, Actions)\n\nProcesses.prototype.list = function (options) {\n  this._do(options, function (guvnor) {\n    guvnor.listProcesses(function (error, processes) {\n      if (error) {\n        throw error\n      }\n\n      var table = new Table('No running processes')\n      table.addHeader(['PID', 'User', 'Group', 'Name', 'Uptime', 'Restarts', 'CPU', 'RSS', 'Heap size', 'Heap used', 'Status', 'Type'])\n\n      var addProcessToTable = function (proc, type) {\n        if (!proc) {\n          return table.addRow(['?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', type])\n        }\n\n        var pid = proc.pid == null ? '?' : proc.pid\n        var user = proc.user == null ? '?' : proc.user\n        var group = proc.group == null ? '?' : proc.group\n        var name = proc.name == null ? '?' : proc.name\n        var uptime = proc.uptime == null || isNaN(proc.uptime) ? '?' : this._moment.duration(proc.uptime * 1000).humanize()\n        var restarts = proc.restarts == null ? '?' : proc.restarts\n        var rss = proc.residentSize == null || isNaN(proc.residentSize) ? '?' : this._formatMemory(proc.residentSize, true)\n        var heapTotal = proc.heapTotal == null || isNaN(proc.heapTotal) ? '?' : this._formatMemory(proc.heapTotal, true)\n        var heapUsed = proc.heapUsed == null || isNaN(proc.heapUsed) ? '?' : this._formatMemory(proc.heapUsed, true)\n        var cpu = proc.cpu == null || isNaN(proc.cpu) ? '?' : proc.cpu.toFixed(2)\n        var status = proc.status == null ? '?' : proc.status\n\n        table.addRow([pid, user, group, name, uptime, restarts, cpu, rss, heapTotal, heapUsed, status, type])\n      }.bind(this)\n\n      processes.forEach(function (proc) {\n        addProcessToTable(proc, proc.cluster ? 'Manager' : 'Process')\n\n        if (proc.cluster && proc.workers) {\n          proc.workers.forEach(function (worker) {\n            addProcessToTable(worker, 'Worker')\n          })\n        }\n      })\n\n      table.print(console.info)\n\n      guvnor.disconnect()\n    }.bind(this))\n  }.bind(this))\n}\n\nProcesses.prototype.start = function (scriptOrAppName, options) {\n  var script = path.resolve(scriptOrAppName)\n\n  if (!this._fs.existsSync(script)) {\n    script = scriptOrAppName\n  }\n\n  var opts = this._parseStartProcessOpts(options)\n  var method = this._do.bind(this)\n  var operation = 'startProcess'\n\n  if (options.user && options.user !== this._user.name) {\n    this._logger.debug('Using admin socket to start process because', options.user, '!=', this._user.name)\n\n    operation = 'startProcessAsUser'\n    method = this._doAdmin.bind(this, operation)\n  }\n\n  method(options, function (guvnor) {\n    this._logger.debug('Starting process', script, opts)\n\n    guvnor[operation](script, opts, function (error, processInfo) {\n      if (error) {\n        this._logger.error('Failed to start %s', script)\n        this._logger.error(error)\n\n        return guvnor.disconnect()\n      }\n\n      if (processInfo.status === 'paused') {\n        this._logger.warn('%s%s has been started in debug mode.', processInfo.cluster ? 'The cluster manager for' : '', processInfo.name)\n        this._logger.warn('It is paused and listening on port %d for a debugger to attach before continuing.', processInfo.debugPort)\n        this._logger.warn('Please connect a debugger to this port (e.g. node-inspector or node-debugger).')\n      }\n\n      processInfo.once('process:uncaughtexception', function (error) {\n        this._logger.warn('%s encountered %s', processInfo.name, error.message || error.stack)\n      }.bind(this))\n\n      processInfo.once('cluster:online', function () {\n        this._logger.debug('%s started with pid %d', script, processInfo.pid)\n\n        guvnor.disconnect()\n      }.bind(this))\n\n      processInfo.once('process:ready', function () {\n        this._logger.debug('%s started with pid %d', script, processInfo.pid)\n\n        guvnor.disconnect()\n      }.bind(this))\n\n      processInfo.once('process:aborted', function () {\n        this._logger.error('%s failed to start', processInfo.name)\n\n        guvnor.disconnect()\n      }.bind(this))\n\n      processInfo.once('process:errored', function (error) {\n        this._logger.error(error.stack ? error.stack : error.message)\n      })\n    }.bind(this))\n  }.bind(this))\n}\n\nProcesses.prototype.stop = function (pidOrNames, options, callback) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Killing remote process', managedProcess.name)\n\n    managedProcess.kill(function (error) {\n      if (!error) {\n        return done()\n      }\n\n      if (error && error.message === 'No socket defined') {\n        guvnor.stopProcess(managedProcess.id, function (error) {\n          if (error && error.code === 'EPERM') {\n            this._logger.error(error.message)\n          }\n\n          done(error)\n        }.bind(this))\n      } else {\n        done(error)\n      }\n    }.bind(this))\n  }.bind(this), callback)\n}\n\nProcesses.prototype.restart = function (pidOrNames, options) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Restarting remote process', managedProcess.name)\n\n    managedProcess.restart(done)\n  }.bind(this))\n}\n\nProcesses.prototype.remove = function (pidOrNames, options) {\n  // first stop any running processes\n  this.stop(pidOrNames, options, function () {\n    // then remove them\n    this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n      this._logger.debug('Removing remote process ' + managedProcess.name)\n      guvnor.removeProcess(managedProcess.id, done)\n    }.bind(this))\n  }.bind(this))\n}\n\nProcesses.prototype.send = function (pidOrNames, event, args, options) {\n  if (!args) {\n    args = []\n  }\n\n  args = [event].concat(args)\n\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Sending event to remote process', args)\n\n    managedProcess.send.apply(managedProcess, args.concat(done))\n  }.bind(this))\n}\n\nProcesses.prototype.signal = function (pidOrNames, signal, options) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Sending signal %s to %d', signal, pidOrNames)\n\n    managedProcess.signal(signal, done)\n  }.bind(this))\n}\n\nProcesses.prototype.heapdump = function (pidOrNames, options) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Writing heap dump')\n    managedProcess.dumpHeap(function (error, snapshot) {\n      if (!error) {\n        console.info('Written heap dump to %s', snapshot.path)\n      }\n\n      done(error)\n    })\n  }.bind(this))\n}\n\nProcesses.prototype.gc = function (pidOrNames, options) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Garbage collecting')\n    managedProcess.forceGc(done)\n  }.bind(this))\n}\n\nProcesses.prototype.startWebMonitor = function (options) {\n  options.name = 'guvnor-web'\n\n  this.start(path.resolve(__dirname + '/../web'), options)\n}\n\nProcesses.prototype.write = function (pidOrNames, string, options) {\n  this._withEach(pidOrNames, options, function (managedProcess, guvnor, done) {\n    this._logger.debug('Writing string', string)\n    managedProcess.write(string, done)\n  }.bind(this))\n}\n\nmodule.exports = Processes\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/cli/Remote.js":"var Autowire = require('wantsit').Autowire\nvar util = require('util')\nvar Actions = require('./Actions')\n\nvar Remote = function () {\n  Actions.call(this)\n\n  this._os = Autowire\n}\nutil.inherits(Remote, Actions)\n\nRemote.prototype.remoteHostConfig = function (host, options) {\n  this._doAdmin('remoteHostConfig', options, function (guvnor) {\n    guvnor.remoteHostConfig(function (error, hostname, port, user, secret) {\n      if (error) {\n        throw error\n      }\n\n      if (!host) {\n        host = hostname.replace(/\\./g, '-')\n      }\n\n      console.info('')\n      console.info('Add the following to your guvnor-web-hosts file:')\n      console.info('')\n      console.info('[%s]'.cyan, host)\n      console.info('  host = %s'.cyan, hostname)\n      console.info('  port = %d'.cyan, port)\n      console.info('  user = %s'.cyan, user)\n      console.info('  secret = %s'.cyan, secret)\n      console.info('')\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nRemote.prototype.addRemoteUser = function (userName, options) {\n  this._doAdmin('addRemoteUser', options, function (guvnor) {\n    guvnor.addRemoteUser(userName, function (error, user) {\n      if (error) {\n        if (error.code === 'DUPLICATEUSER') {\n          this._logger.error('A user named %s already exists', userName)\n          return process.exit(1)\n        }\n\n        throw error\n      }\n\n      this._logger.debug('Added user', userName, user)\n\n      console.info('')\n      console.info('Add the following to your guvnor-web-users file:')\n      console.info('')\n      console.info('[%s.%s]'.cyan, userName, this._os.hostname().replace(/\\./g, '-'))\n      console.info('  secret = %s'.cyan, user.secret)\n      console.info('')\n      console.info('If %s is not in your config file yet, run `guv-web passwd %s` to generate the appropriate configuration', userName, userName)\n\n      guvnor.disconnect()\n    }.bind(this))\n  }.bind(this))\n}\n\nRemote.prototype.deleteRemoteUser = function (userName, options) {\n  this._doAdmin('removeRemoteUser', options, function (guvnor) {\n    guvnor.removeRemoteUser(userName, function (error) {\n      if (error) {\n        if (error.code === 'WILLNOTREMOVEGUVNORUSER') {\n          this._logger.error(error.message)\n          return process.exit(1)\n        }\n\n        throw error\n      }\n\n      this._logger.debug('Removed user', userName)\n\n      guvnor.disconnect()\n    }.bind(this))\n  }.bind(this))\n}\n\nRemote.prototype.listRemoteUsers = function (options) {\n  this._doAdmin('listRemoteUsers', options, function (guvnor) {\n    guvnor.listRemoteUsers(function (error, users) {\n      if (error) {\n        throw error\n      }\n\n      if (users.length === 0) {\n        console.info('No remote users')\n      } else {\n        users.forEach(function (user) {\n          console.info(user.name)\n        })\n      }\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nRemote.prototype.rotateRemoteUserKeys = function (userName, options) {\n  this._doAdmin('rotateRemoteUserKeys', options, function (guvnor) {\n    guvnor.rotateRemoteUserKeys(userName, function (error, user) {\n      if (error) {\n        throw error\n      }\n\n      this._logger.debug('Removed user', userName)\n\n      console.info('')\n      console.info('Update your guvnor-web-users file with the following:')\n      console.info('')\n      console.info('[%s.%s]'.cyan, userName, this._os.hostname().replace(/\\./g, '-'))\n      console.info('  secret = %s'.cyan, user.secret)\n      console.info('')\n\n      guvnor.disconnect()\n    }.bind(this))\n  }.bind(this))\n}\n\nRemote.prototype.generateSSLCertificate = function (days, options) {\n  days = days || 365\n\n  this._doAdmin('generateRemoteRpcCertificates', options, function (guvnor) {\n    guvnor.generateRemoteRpcCertificates(days, function (error, location) {\n      if (error) {\n        throw error\n      }\n\n      console.info('')\n      console.info('SSL keys generated and stored at', location)\n      console.info('Please restart guvnor for the changes to take effect.')\n      console.info('')\n\n      guvnor.disconnect()\n    })\n  })\n}\n\nmodule.exports = Remote\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/Crypto.js":"var crypto = require('crypto')\n\nvar Crypto = function () {}\n\nCrypto.prototype.sign = function (principal, secret, callback) {\n  crypto.randomBytes(32, function (error, bytes) {\n    if (error) return callback(error)\n\n    var nonce = bytes.toString('base64')\n    var date = Date.now()\n\n    callback(undefined, {\n      principal: principal,\n      date: date,\n      nonce: nonce,\n      hash: this._hash(date + secret + nonce)\n    })\n  }.bind(this))\n}\n\nCrypto.prototype.verify = function (signature, secret) {\n  return signature.hash === this._hash(signature.date + secret + signature.nonce)\n}\n\nCrypto.prototype._hash = function (date, nonce, secret) {\n  var shasum = crypto.createHash('sha1')\n  shasum.update(date + secret + nonce)\n  return shasum.digest('base64')\n}\n\nCrypto.prototype.generateSecret = function (callback) {\n  crypto.randomBytes(32, function (error, bytes) {\n    callback(error, bytes ? bytes.toString('base64') : undefined)\n  })\n}\n\nmodule.exports = Crypto\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/DaemonConnection.js":"var EventEmitter = require('wildemitter')\nvar util = require('util')\nvar Autowire = require('wantsit').Autowire\nvar async = require('async')\n\nvar DaemonConnection = function () {\n  EventEmitter.call(this, {\n    wildcard: true,\n    delimiter: ':'\n  })\n\n  this._logger = Autowire\n  this._managedProcessFactory = Autowire\n  this._semver = Autowire\n  this._processStore = Autowire\n  this._appStore = Autowire\n\n  this._api = {\n    sendEvent: function () {\n      var tasks = []\n\n      var args = Array.prototype.slice.call(arguments, 0)\n      var event = args[0]\n\n      args.forEach(function (arg, index) {\n        if (!arg || !arg.id) {\n          return\n        }\n\n        var func\n\n        if (arg.script) {\n          func = this._findManagedProcess.bind(this)\n        } else if (arg.url) {\n          func = this._findManagedApp.bind(this)\n        } else {\n          return\n        }\n\n        tasks.push(function (index, args, callback) {\n          func(arg, function (error, managed) {\n            if (error) {\n              return callback(error)\n            }\n\n            // replace info with object\n            args[index] = managed\n\n            if (event === 'worker:exit' && index === 2) {\n              // remove the worker from the manager's array\n              args[1].removeWorker(managed)\n\n              // remove it from our store\n              this._processStore.remove('id', managed.id)\n            }\n\n            // get processInfo to emit the event\n            managed.emit.apply(managed, [event].concat(args.slice(index + 1)))\n\n            callback()\n          }.bind(this))\n        }.bind(this, index, args))\n      }.bind(this))\n\n      async.series(tasks, function () {\n        // broadcast event to all listeners\n        this.emit.apply(this, args)\n      }.bind(this, args))\n    }.bind(this)\n  }\n}\nutil.inherits(DaemonConnection, EventEmitter)\n\nDaemonConnection.prototype._findManagedProcess = function (info, callback) {\n  if (!info) {\n    return callback(undefined, null)\n  }\n\n  this._processStore.findOrCreate('id', info.id, [info, this], function (error, managedProcess) {\n    if (error) {\n      return callback(error)\n    }\n\n    managedProcess.update(info)\n\n    if (managedProcess.manager) {\n      // this is a worker process, find the cluster manager and add it\n      var manager = this._processStore.find('id', managedProcess.manager)\n      managedProcess.manager = manager\n      manager.addWorker(managedProcess)\n    }\n\n    callback(undefined, managedProcess)\n  }.bind(this))\n}\n\nDaemonConnection.prototype._findManagedApp = function (info, callback) {\n  if (!info) {\n    return callback(undefined, null)\n  }\n\n  this._appStore.findOrCreate('id', info.id, [info, this], callback)\n}\n\nDaemonConnection.prototype.connect = function (callback) {\n  if (!this._semver.satisfies(process.versions.node, '>=0.10.29')) {\n    return callback(new Error('Please use node 0.10.29 or later'))\n  }\n\n  this._connect(callback)\n}\n\nDaemonConnection.prototype._connect = function (callback) {}\n\nDaemonConnection.prototype.disconnect = function (callback) {}\n\nDaemonConnection.prototype.connectToProcess = function (id, callback) {\n  this._logger.warn('Deprecation warning: connectToProcess will be removed in a future release, please use methods on process objects instead')\n\n  this._connectToProcess(id, callback)\n}\n\nDaemonConnection.prototype._connectToProcess = function (id, callback) {}\n\nDaemonConnection.prototype._overrideProcessInfoMethods = function () {\n  // hijack listProcesses to remove processInfos that have been removed\n  var listProcesses = this.listProcesses\n\n  this.listProcesses = this._overrideList.bind(this, listProcesses, this._processStore, this._findManagedProcess.bind(this))\n\n  var startProcess = this.startProcess\n\n  this.startProcess = function (script, options, callback) {\n    if (typeof options === 'function' && !callback) {\n      callback = options\n      options = {}\n    }\n\n    startProcess(script, options, function (error, processInfo) {\n      if (error) {\n        callback(error)\n\n        return\n      }\n\n      this._findManagedProcess(processInfo, callback)\n    }.bind(this))\n  }.bind(this)\n\n  this._overrideFinderMethods(['findProcessInfoById', 'findProcessInfoByPid', 'findProcessInfoByName'], this._findManagedProcess.bind(this))\n}\n\nDaemonConnection.prototype._overrideAppMethods = function () {\n  // hijack listProcesses to remove processInfos that have been removed\n  var listApplications = this.listApplications\n\n  this.listApplications = this._overrideList.bind(this, listApplications, this._appStore, this._findManagedApp.bind(this))\n\n  var deployApplication = this.deployApplication\n\n  this.deployApplication = function () {\n    var args = Array.prototype.slice.call(arguments)\n    var callback = function () {}\n\n    if (typeof args[args.length - 1] === 'function') {\n      callback = args.pop()\n      args.push(function (error, appInfo) {\n        if (error) {\n          callback(error)\n\n          return\n        }\n\n        this._findManagedApp(appInfo, callback)\n      }.bind(this))\n    }\n\n    deployApplication.apply(this, args)\n  }.bind(this)\n\n  // replace pojo appInfo with EventEmitter version\n  this._overrideFinderMethods(['findAppById', 'findAppByName'], this._findManagedApp.bind(this))\n}\n\nDaemonConnection.prototype._overrideList = function (list, store, find, callback) {\n  list(function (error, things) {\n    if (error) {\n      callback(error)\n\n      return\n    }\n\n    if (Array.isArray(things)) {\n      // remove missing things\n      store.intersect('id', things)\n    }\n\n    // replace pojo thingInfo with our managedThing\n    async.parallel(things.map(function (thing, index) {\n      return function (callback) {\n        find(thing, function (error, managedThing) {\n          if (error) {\n            callback(error)\n\n            return\n          }\n\n          things[index] = managedThing\n\n          callback()\n        })\n      }\n    }), function (error) {\n      callback(error, things)\n    })\n  })\n}\n\nDaemonConnection.prototype._overrideFinderMethods = function (methods, find) {\n  methods.forEach(function (method) {\n    var original = this[method]\n\n    this[method] = function (func, id, callback) {\n      func(id, function (error, appInfo) {\n        if (error) {\n          callback(error)\n\n          return\n        }\n\n        find(appInfo, callback)\n      })\n    }.bind(this, original)\n  }.bind(this))\n}\n\nmodule.exports = DaemonConnection\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/ExecSync.js":"var child_process = require('child_process')\n\nif (child_process.execSync) {\n  // node 0.12+, io.js\n  module.exports = child_process.execSync.bind(child_process)\n} else {\n  // node 0.10\n  var execSync = require('execSync')\n\n  module.exports = function () {\n    var result = execSync.exec.apply(execSync, arguments)\n\n    if (result.code !== 0) {\n      throw new Error('Command failed with code ' + result.code)\n    }\n\n    return result.stdout.trim()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/HelpfulError.js":"// monkey patch the Error type to serialise properties to JSON - otherwise we end up with empty objects in the browser.\nObject.defineProperty(Error.prototype, 'toJSON', {\n  value: function () {\n    var alt = {}\n\n    Object.getOwnPropertyNames(this).forEach(function (key) {\n      alt[key] = this[key]\n    }, this)\n\n    if (!alt.message && alt.code) {\n      alt.message = alt.code\n    }\n\n    return alt\n  },\n  configurable: true\n})\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/ManagedApp.js":"var util = require('util')\nvar EventEmitter = require('wildemitter')\n\nvar ManagedApp = function (info, daemon) {\n  EventEmitter.call(this, {\n    wildcard: true,\n    delimiter: ':'\n  })\n\n  // we're going to make the callbacks object non-enumerable\n  delete this.callbacks\n\n  Object.defineProperties(this, {\n    callbacks: {\n      value: {},\n      writable: false\n    }\n  })\n\n  this.update(info)\n\n  this.switchRef = daemon.switchApplicationRef.bind(daemon, this.name)\n  this.listRefs = daemon.listApplicationRefs.bind(daemon, this.name)\n  this.updateRefs = daemon.updateApplicationRefs.bind(daemon, this.name)\n  this.currentRef = daemon.currentRef.bind(daemon, this.name)\n}\nutil.inherits(ManagedApp, EventEmitter)\n\nManagedApp.prototype.update = function (info) {\n  if (!info) {\n    return\n  }\n\n  for (var key in info) {\n    this[key] = info[key]\n  }\n}\n\nmodule.exports = ManagedApp\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/ManagedProcess.js":"var util = require('util')\nvar EventEmitter = require('wildemitter')\nvar Autowire = require('wantsit').Autowire\nvar timeoutify = require('timeoutify')\n\nvar ManagedProcess = function (info) {\n  EventEmitter.call(this, {\n    wildcard: true,\n    delimiter: ':'\n  })\n\n  this._dnode = Autowire\n  this._logger = Autowire\n  this._config = Autowire\n\n  // we're going to make the callbacks object non-enumerable\n  delete this.callbacks\n\n  Object.defineProperties(this, {\n    callbacks: {\n      value: {},\n      writable: false\n    },\n    _rpc: {\n      value: {},\n      writable: false\n    },\n    _connected: {\n      value: false,\n      writable: true\n    },\n    _connecting: {\n      value: false,\n      writable: true\n    },\n    _remote: {\n      value: null,\n      writable: true\n    }\n  })\n\n  this.workers = []\n\n  this.update(info)\n\n  // these methods are defined on the ProcessRPC class - must be kept in sync\n  var methods = [\n    'kill',\n    'restart',\n    'send',\n    'signal',\n    'reportStatus',\n    'dumpHeap',\n    'forceGc',\n    'write',\n    'setClusterWorkers',\n    'fetchHeapSnapshot',\n    'removeHeapSnapshot'\n  ]\n  methods.forEach(function (method) {\n    this[method] = this._invoke.bind(this, method)\n  }.bind(this))\n}\nutil.inherits(ManagedProcess, EventEmitter)\n\nManagedProcess.prototype.update = function (info) {\n  if (!info) {\n    return\n  }\n\n  for (var key in info) {\n    this[key] = info[key]\n  }\n\n  if (!this.cluster) {\n    // these properties are only present on cluster managers\n    delete this.workers\n    delete this.setClusterWorkers\n\n    // these are declared on the prototype so can't delete them\n    this.addWorker = undefined\n    this.removeWorker = undefined\n  }\n}\n\nManagedProcess.prototype.disconnect = function (callback) {\n  if (!this._remote) {\n    if (callback) {\n      callback()\n    }\n\n    return\n  }\n\n  if (callback) {\n    this._remote.once('end', callback)\n  }\n\n  this._connected = false\n  this._remote.end()\n  this._remote = null\n}\n\nManagedProcess.prototype.connect = function (callback) {\n  if (this._connected) {\n    callback(undefined, this)\n\n    return\n  }\n\n  this.once('_connected', callback)\n\n  if (!this.socket) {\n    this.emit('_connected', new Error('No socket defined'))\n\n    return\n  }\n\n  // don't try to connect more than once\n  if (this._connecting) {\n    return\n  }\n\n  this._connecting = true\n\n  this._remote = this._dnode({\n    // forward received events on\n    sendEvent: this.emit.bind(this)\n  }, {\n    timeout: this._config.guvnor ? this._config.guvnor.rpctimeout : this._config.rpctimeout\n  })\n  this._remote.on('error', function (error) {\n    if (this._connecting) {\n      this._connecting = false\n      this.emit('_connected', error)\n    }\n  }.bind(this))\n  this._remote.on('remote', function (remote) {\n    this._logger.debug('Connected to remote process')\n\n    this._connecting = false\n    this._connected = true\n\n    this._bindRemoteMethods(remote)\n\n    this.emit('_connected', undefined, this)\n  }.bind(this))\n\n  try {\n    this._remote.connect(this.socket)\n  } catch(e) {\n    callback(e)\n  }\n}\n\nManagedProcess.prototype._bindRemoteMethods = function (remote) {\n  for (var method in remote) {\n    if (method === 'dumpHeap' || method === 'forceGc' || method === 'fetchHeapSnapshot') {\n      // these are slow so don't timeoutify\n      this._logger.debug('Exposing remote method %s without timeout', method)\n      this._rpc[method] = remote[method].bind(remote)\n    } else {\n      this._logger.debug('Timeoutifying remote method', method)\n      this._rpc[method] = timeoutify(remote[method].bind(remote), this._config.guvnor ? this._config.guvnor.timeout : this._config.timeout)\n    }\n  }\n}\n\nManagedProcess.prototype._invoke = function (method) {\n  var args = Array.prototype.slice.call(arguments)\n  var callback = args[args.length - 1]\n\n  if (typeof callback !== 'function') {\n    callback = function (error) {\n      if (error) {\n        throw error\n      }\n    }\n  }\n\n  // defer execution if we're not connected yet\n  if (!this._connected) {\n    this.connect(function (args, callback, error) {\n      if (error) {\n        return callback(error)\n      }\n\n      this._invoke.apply(this, args)\n    }.bind(this, args, callback))\n\n    return\n  }\n\n  // remove the method name from the arguments array\n  args = args.slice(1)\n\n  if (typeof this._rpc[method] !== 'function') {\n    return callback(new Error('No method ' + method + ' defined!'))\n  }\n\n  try {\n    this._rpc[method].apply(this._rpc, args)\n  } catch (error) {\n    callback(error)\n  }\n}\n\nManagedProcess.prototype.addWorker = function (worker) {\n  if (!this.workers.some(function (existingWorker) {\n      return existingWorker.id === worker.id\n    })) {\n    this.workers.push(worker)\n  }\n}\n\nManagedProcess.prototype.removeWorker = function (worker) {\n  for (var i = 0; i < this.workers.length; i++) {\n    if (this.workers[i].id === worker.id) {\n      this.workers.splice(i, 1)\n    }\n  }\n}\n\nmodule.exports = ManagedProcess\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/common/Store.js":"var Autowire = require('wantsit').Autowire\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nvar Store = function (factoryName) {\n  EventEmitter.call(this)\n\n  this._store = []\n  this._factory = Autowire({\n    name: factoryName\n  })\n}\nutil.inherits(Store, EventEmitter)\n\nStore.prototype.all = function () {\n  return this._store\n}\n\nStore.prototype.create = function (args, callback) {\n  this._factory.create(args, function (error, entity) {\n    if (!error) {\n      this._store.push(entity)\n    }\n\n    if (callback) {\n      callback(error, entity)\n    }\n  }.bind(this))\n}\n\nStore.prototype.find = function (key, value) {\n  var search = key.split('.')\n  var needle = null\n\n  this._store.forEach(function (entry) {\n    var subkey\n    var subvalue = entry\n\n    for (var i = 0; i < search.length; i++) {\n      subkey = search[i]\n\n      if (!subvalue[subkey]) {\n        return\n      }\n\n      subvalue = subvalue[subkey]\n    }\n\n    if (subvalue === value) {\n      needle = entry\n    }\n  })\n\n  return needle\n}\n\nStore.prototype.findOrCreate = function (key, value, args, callback) {\n  var entity = this.find(key, value)\n\n  if (entity) {\n    process.nextTick(callback.bind(null, undefined, entity))\n  } else {\n    this.create(args, callback)\n  }\n}\n\nStore.prototype.remove = function (key, value) {\n  var search = key.split('.')\n\n  for (var i = 0; i < this._store.length; i++) {\n    if (this._findValue(search, this._store[i]) === value) {\n      this._store.splice(i, 1)\n      i--\n    }\n  }\n}\n\nStore.prototype.removeAll = function () {\n  this._store = []\n}\n\nStore.prototype.intersect = function (key, things) {\n  var search = key.split('.')\n\n  for (var i = 0; i < this._store.length; i++) {\n    if (!things.some(function (thing) {\n      return this._matches(search, thing, this._store[i])\n    }.bind(this))) {\n      this._store.splice(i, 1)\n      i--\n    }\n  }\n}\n\nStore.prototype._matches = function (key, a, b) {\n  return this._findValue(key, a) === this._findValue(key, b)\n}\n\nStore.prototype._findValue = function (key, thing) {\n  if (!Array.isArray(key)) {\n    key = key.split('.')\n  }\n\n  var value = thing\n\n  for (var i = 0; i < key.length; i++) {\n    if (key[i] in value) {\n      value = value[key[i]]\n    } else {\n      return null\n    }\n  }\n\n  return value\n}\n\nmodule.exports = Store\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/daemon/DaemonLogger.js":"var Transport = require('winston').Transport\nvar util = require('util')\nvar Autowire = require('wantsit').Autowire\n\nvar DaemonLogger = function () {\n  Transport.call(this, { level: 'debug' })\n\n  this._userRpc = Autowire\n  this._adminRpc = Autowire\n  this._logger = Autowire\n}\nutil.inherits(DaemonLogger, Transport)\n\nDaemonLogger.prototype.name = 'daemon'\n\nDaemonLogger.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent || !process.send) {\n    return callback(null, true)\n  }\n\n  this._userRpc.broadcast('daemon:log:' + level, {\n    date: Date.now(),\n    message: ('' + msg).trim()\n  })\n\n  this.emit('logged')\n  callback(null, true)\n}\n\nmodule.exports = DaemonLogger\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/daemon/Guvnor.js":"var Autowire = require('wantsit').Autowire\nvar async = require('async')\nvar EventEmitter = require('wildemitter')\nvar util = require('util')\n\nvar Guvnor = function () {\n  EventEmitter.call(this, {\n    wildcard: true,\n    delimiter: ':'\n  })\n\n  this._config = Autowire\n  this._logger = Autowire\n  this._processService = Autowire\n  this._fs = Autowire\n  this._usage = Autowire\n  this._cpuStats = Autowire\n  this._remoteUserService = Autowire\n  this._nodeInspectorWrapper = Autowire\n  this._os = Autowire\n  this._appService = Autowire\n  this._pem = Autowire\n  this._ini = Autowire\n  this._posix = Autowire\n  this._etc_passwd = Autowire\n\n  this._processInfoStore = Autowire\n  this._processInfoStoreFactory = Autowire\n\n  // write out process file on exit\n  process.on('exit', function () {\n    if (!this._config.guvnor.autoresume) {\n      return\n    }\n\n    this._processInfoStore.saveSync()\n  }.bind(this))\n}\nutil.inherits(Guvnor, EventEmitter)\n\nGuvnor.prototype.afterPropertiesSet = function (done) {\n  process.title = 'guvnor'\n\n  var tasks = []\n\n  if (this._config.guvnor.autoresume) {\n    tasks = this._processInfoStore.all().map(function (processInfo) {\n      return function (callback) {\n        this._processService.startProcess(processInfo, function (error) {\n          if (error) {\n            this._logger.error('Error resuming process', processInfo.name, error)\n          }\n\n          // don't pass the error callback because if we do, we'll abort resuming the rest of the processes\n          callback()\n        }.bind(this))\n      }.bind(this)\n    }.bind(this))\n  }\n\n  async.series(tasks, done)\n}\n\n/**\n * Start a new NodeJS process\n *\n * @param {String} script The path to the NodeJS script to start\n * @param {Object} options\n * @param {Number} [options.instances] The number of instances to start (1)\n * @param {String} [options.name] Name to give the process (script filename)\n * @param {String|Number} [options.user] User name or uid to start the process as (current user)\n * @param {String|Number} [options.group] Group name or gid to start the process as (current group)\n * @param {Boolean} [options.restartOnError] Restart the process automatically when it exits abnormally (true)\n * @param {Number} [options.restartRetries] Number of times the process can be restarted when crashing (5)\n * @oaram {Number} [options.crashRecoveryPeriod] The time before the process is considered to not be crashing (5000ms)\n * @param {Object} [options.env] Process environment key/value pairs\n * @param {Function} callback Called on successful process start or on startup error\n * @returns {Number} PID of the process that was started\n */\nGuvnor.prototype.startProcess = function (userDetails, script, options, callback) {\n  var appInfo = this._appService.findByName(script)\n\n  if (appInfo) {\n    options.script = appInfo.path\n    options.app = appInfo.id\n    options.name = appInfo.name\n  }\n\n  if (!options.user) {\n    options.user = userDetails.name\n  }\n\n  if (!options.group) {\n    options.group = userDetails.group\n  }\n\n  this._processService.startProcess(script, options, callback)\n}\n\n// this is exposed as an admin rpc function..\nGuvnor.prototype.startProcessAsUser = function (userDetails, script, options, callback) {\n  this.startProcess(userDetails, script, options, callback)\n}\n\nGuvnor.prototype.stopProcess = function (userDetails, id, callback) {\n  var processInfo = this._processService.findById(id)\n\n  if (!processInfo) {\n    return callback(new Error('No process found for id ' + id))\n  }\n\n  if (processInfo.status === 'running') {\n    return callback(new Error('Process ' + processInfo.name + ' is running, use it\\'s RPC service to kill it'))\n  }\n\n  // if the user is root, or the user is the one that owns the process or is in the same group as the process owner\n  if (userDetails.name === this._config.guvnor.user || userDetails.name === processInfo.user || userDetails.groups.indexOf(processInfo.group) !== -1) {\n    if (processInfo.process && processInfo.process.kill) {\n      processInfo.process.emit('process:stopping')\n      processInfo.process.kill()\n      callback()\n      return\n    }\n\n    callback(new Error('Could not kill process'))\n  } else {\n    var error = new Error('Permission denied')\n    error.code = 'EPERM'\n\n    callback(error)\n  }\n}\n\nGuvnor.prototype.removeProcess = function (userDetails, id, callback) {\n  this._processService.removeProcess(id, callback)\n}\n\nGuvnor.prototype.getServerStatus = function (userDetails, callback) {\n  this._cpuStats(function (error, stats) {\n    var status = {\n      time: Date.now(),\n      uptime: this._os.uptime(),\n      freeMemory: this._os.freemem(),\n      totalMemory: this._os.totalmem(),\n      cpus: this._os.cpus(),\n      debuggerPort: this._config.remote.inspector.enabled ? this._nodeInspectorWrapper.debuggerPort : undefined\n    }\n\n    if (!error) {\n      stats.forEach(function (load, index) {\n        status.cpus[index].load = load\n      })\n    }\n\n    callback(error, status)\n  }.bind(this))\n}\n\nGuvnor.prototype.listUsers = function (userDetails, callback) {\n  this._etc_passwd.getGroups(function listGroups (error, groups) {\n    if (error) {\n      return callback(error)\n    }\n\n    var users = []\n\n    // only return groups without the _ prefix\n    groups.filter(function removeHiddenGroups (group) {\n      return group.groupname.substring(0, 1) !== '_'\n    }).map(function convertToGroupName (group) {\n      return group.groupname\n    }).forEach(function listGroupUsers (group) {\n      this._posix.getgrnam(group).members.filter(function removeHiddenUsers (user) {\n        return user.substring(0, 1) !== '_'\n      }).forEach(function findUserGroups (username) {\n        var user = users.reduce(function addUserToListIfNecessary (prev, current) {\n          if (prev) {\n            return prev\n          }\n\n          if (current.name === username) {\n            return current\n          }\n        }, null)\n\n        if (!user) {\n          var pwnam = this._posix.getpwnam(username)\n          var grname = this._posix.getgrnam(pwnam.gid)\n\n          user = {\n            uid: pwnam.uid,\n            name: pwnam.name,\n            group: grname.name,\n            groups: []\n          }\n\n          users.push(user)\n        }\n\n        user.groups.push(group)\n      }.bind(this))\n    }.bind(this))\n\n    users.forEach(function (user) {\n      if (user.groups.indexOf(user.group) === -1) {\n        user.groups.push(user.group)\n      }\n    })\n\n    callback(undefined, users)\n  }.bind(this))\n}\n\nGuvnor.prototype.listProcesses = function (userDetails, callback) {\n  async.parallel(this._processService.listProcesses().map(function (processInfo) {\n    return function (callback) {\n      var language = processInfo.script.substring(processInfo.script.length - '.coffee'.length) === '.coffee' ? 'coffee' : 'javascript'\n\n      if (!processInfo.remote || processInfo.status !== 'running') {\n        // this process is not ready yet\n        return callback(undefined, {\n          id: processInfo.id,\n          name: processInfo.name,\n          restarts: processInfo.totalRestarts,\n          status: processInfo.status,\n          script: processInfo.script,\n          debugPort: processInfo.debugPort,\n          user: processInfo.user,\n          group: processInfo.group,\n          cwd: processInfo.cwd,\n          argv: processInfo.argv,\n          execArgv: processInfo.execArgv,\n          pid: processInfo.pid,\n          language: language\n        })\n      }\n\n      processInfo.remote.reportStatus(function (error, status) {\n        var processStatus = processInfo.status\n\n        if (error && error.code === 'TIMEOUT') {\n          processStatus = 'unresponsive'\n        }\n\n        status = status || {}\n        status.restarts = processInfo.totalRestarts\n        status.id = processInfo.id\n        status.script = processInfo.script\n        status.debugPort = processInfo.debugPort\n        status.status = processStatus\n        status.language = language\n        status.socket = processInfo.socket\n\n        callback(undefined, status)\n      })\n    }\n  }), callback)\n}\n\nGuvnor.prototype.findProcessInfoById = function (userDetails, id, callback) {\n  callback(undefined, this._processService.findById(id))\n}\n\nGuvnor.prototype.findProcessInfoByPid = function (userDetails, pid, callback) {\n  callback(undefined, this._processService.findByPid(pid))\n}\n\nGuvnor.prototype.findProcessInfoByName = function (userDetails, name, callback) {\n  callback(undefined, this._processService.findByName(name))\n}\n\nGuvnor.prototype.dumpProcesses = function (userDetails, callback) {\n  this._processInfoStore.save(function (error) {\n    callback(error)\n\n    this.emit('daemon:dump')\n  }.bind(this))\n}\n\nGuvnor.prototype.restoreProcesses = function (userDetails, callback) {\n  this._processInfoStoreFactory.create(['processInfoFactory', 'processes.json'], function (error, store) {\n    if (error) return callback(error)\n\n    async.series(store.all().map(function (processInfo) {\n      return this._processService.startProcess.bind(this._processService, processInfo.script, processInfo)\n    }.bind(this)), function (error, result) {\n      callback(error, result)\n      this.emit('daemon:restore')\n    }.bind(this))\n  }.bind(this))\n}\n\nGuvnor.prototype.kill = function (userDetails, callback) {\n  if (callback) {\n    callback()\n  }\n\n  this.emit('daemon:exit')\n  process.exit(0)\n}\n\nGuvnor.prototype.remoteHostConfig = function (userDetails, callback) {\n  this._remoteUserService.findOrCreateUser(this._config.guvnor.user, function (error, user) {\n    callback(\n      error,\n      this._os.hostname(),\n      this._config.remote.port,\n      this._config.guvnor.user,\n      user.secret\n    )\n  }.bind(this))\n}\n\nGuvnor.prototype.addRemoteUser = function (userDetails, userName, callback) {\n  this._remoteUserService.createUser(userName, callback)\n}\n\nGuvnor.prototype.removeRemoteUser = function (userDetails, userName, callback) {\n  if (userName === this._config.guvnor.user) {\n    var error = new Error('Cowardly refusing to delete ' + this._config.guvnor.user)\n    error.code = 'WILLNOTREMOVEGUVNORUSER'\n\n    return callback(error)\n  }\n\n  this._remoteUserService.removeUser(userName, callback)\n}\n\nGuvnor.prototype.listRemoteUsers = function (userDetails, callback) {\n  this._remoteUserService.listUsers(callback)\n}\n\nGuvnor.prototype.rotateRemoteUserKeys = function (userDetails, userName, callback) {\n  this._remoteUserService.rotateKeys(userName, callback)\n}\n\nGuvnor.prototype.deployApplication = function (userDetails, name, url, user, onOut, onErr, callback) {\n  this._appService.deploy(name, url, user, onOut, onErr, callback)\n}\n\nGuvnor.prototype.removeApplication = function (userDetails, name, callback) {\n  this._appService.remove(name, callback)\n}\n\nGuvnor.prototype.listApplications = function (userDetails, callback) {\n  this._appService.list(callback)\n}\n\nGuvnor.prototype.findAppByName = function (userDetails, name, callback) {\n  callback(undefined, this._appService.findByName(name))\n}\n\nGuvnor.prototype.findAppById = function (userDetails, id, callback) {\n  callback(undefined, this._appService.findById(id))\n}\n\nGuvnor.prototype.switchApplicationRef = function (userDetails, name, ref, onOut, onErr, callback) {\n  this._appService.switchRef(name, ref, onOut, onErr, callback)\n}\n\nGuvnor.prototype.listApplicationRefs = function (userDetails, name, callback) {\n  this._appService.listRefs(name, callback)\n}\n\nGuvnor.prototype.updateApplicationRefs = function (userDetails, name, onOut, onError, callback) {\n  this._appService.updateRefs(name, onOut, onError, callback)\n}\n\nGuvnor.prototype.currentRef = function (userDetails, name, callback) {\n  this._appService.currentRef(name, callback)\n}\n\nGuvnor.prototype.generateRemoteRpcCertificates = function (userDetails, days, callback) {\n  this._pem.createCertificate({\n    days: days,\n    selfSigned: true\n  }, function (error, keys) {\n    if (error) {\n      callback(error)\n\n      return\n    }\n\n    var keyPath = this._config.guvnor.confdir + '/rpc.key'\n    var certPath = this._config.guvnor.confdir + '/rpc.cert'\n    var configPath = this._config.guvnor.confdir + '/guvnor'\n\n    async.parallel([\n      this._fs.writeFile.bind(this._fs, keyPath, keys.serviceKey, {\n        mode: parseInt('0600', 8)\n      }),\n      this._fs.writeFile.bind(this._fs, certPath, keys.certificate, {\n        mode: parseInt('0600', 8)\n      })\n    ], function (error) {\n      if (error) {\n        callback(error)\n\n        return\n      }\n\n      this._fs.readFile(configPath, 'utf-8', function (error, result) {\n        if (error && error.code !== 'ENOENT') {\n          callback(error)\n\n          return\n        }\n\n        var config = {}\n\n        if (result) {\n          config = this._ini.parse(result)\n        }\n\n        config.remote = config.remote || {}\n        config.remote.key = keyPath\n        config.remote.certificate = certPath\n\n        this._fs.writeFile(configPath, this._ini.stringify(config), {\n          mode: parseInt('0600', 8)\n        }, function (error) {\n          callback(error, configPath)\n\n          this.emit('daemon:genssl')\n        }.bind(this))\n      }.bind(this))\n    }.bind(this))\n  }.bind(this))\n}\n\nmodule.exports = Guvnor\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/daemon/StartupNotifier.js":"var Autowire = require('wantsit').Autowire\n\nvar StartupNotifier = function () {\n  this._userRpc = Autowire\n  this._adminRpc = Autowire\n  this._remoteRpc = Autowire\n  this._nodeInspectorWrapper = Autowire\n  this._parentProcess = Autowire\n  this._commandLine = Autowire\n  this._fileSystem = Autowire\n}\n\nStartupNotifier.prototype.afterPropertiesSet = function () {\n  // change directory to the rundir\n  process.chdir(this._fileSystem.getRunDir())\n\n  // all done, send our parent process a message\n  this._parentProcess.send('daemon:ready', {\n    user: this._userRpc.socket,\n    admin: this._adminRpc.socket,\n    remote: this._remoteRpc.port,\n    debug: this._nodeInspectorWrapper.debuggerPort\n  })\n}\n\nmodule.exports = StartupNotifier\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/local/LocalDaemonConnection.js":"var EventEmitter = require('wildemitter')\nvar util = require('util')\nvar Autowire = require('wantsit').Autowire\nvar timeoutify = require('timeoutify')\n\nvar LocalDaemonConnection = function (socketName) {\n  EventEmitter.call(this, {\n    wildcard: true,\n    delimiter: ':'\n  })\n\n  this._connected = false\n\n  Object.defineProperty(this, 'connected', {\n    enumerable: true,\n    get: function () {\n      return this._connected\n    }.bind(this)\n  })\n\n  this._socketName = socketName\n  this._client = null\n  this._logger = Autowire\n  this._fs = Autowire\n  this._dnode = Autowire\n  this._config = Autowire\n}\nutil.inherits(LocalDaemonConnection, EventEmitter)\n\nLocalDaemonConnection.prototype.disconnect = function (callback) {\n  if (!this._client || !this.connected) {\n    this._logger.debug('Not connected to the daemon')\n\n    if (callback) {\n      callback()\n    }\n\n    return\n  }\n\n  this._connected = false\n  this._logger.debug('Disconnecting from daemon socket', this._socketName)\n  this._client.once('end', function () {\n    this._logger.debug('Disconnected from daemon socket', this._socketName)\n\n    delete this._client\n\n    if (callback) {\n      callback()\n    }\n  }.bind(this))\n\n  this._client.stream.end()\n  this._client.stream.destroy()\n  this._client.destroy()\n}\n\nLocalDaemonConnection.prototype.connect = function (api, callback) {\n  return this._connect(this._config.guvnor.rundir + '/' + this._socketName, api, callback)\n}\n\nLocalDaemonConnection.prototype._connect = function (socket, api, callback) {\n  this._logger.debug('Connecting to daemon on', socket)\n\n  var serverApi = {}\n\n  this._client = this._dnode(api, {\n    timeout: this._config.guvnor.rpctimeout\n  })\n  this._client.connect(socket, function (remote) {\n    this._logger.debug('Connected to daemon on', socket)\n\n    for (var method in remote) {\n      if (typeof (remote[method]) !== 'function') {\n        continue\n      }\n\n      var func\n\n      if (method === 'deployApplication' ||\n        method === 'removeApplication' ||\n        method === 'runApplication' ||\n        method === 'switchApplicationRef' ||\n        method === 'updateApplicationRefs'\n      ) {\n        this._logger.debug('Exposing remote method without timeout', method)\n        func = remote[method].bind(remote)\n      } else {\n        this._logger.debug('Timeoutifying remote method', method)\n        func = timeoutify(remote[method].bind(remote), this._config.guvnor.timeout)\n      }\n\n      func = function (func, method) {\n        var args = Array.prototype.slice.call(arguments, 2)\n        var callback = args[args.length - 1]\n\n        if (typeof callback !== 'function') {\n          callback = function () {}\n        }\n\n        if (this._connected) {\n          // we are connected, invoke remote argument\n          func.apply(func, args)\n        } else if (method === 'kill') {\n          // trying to kill a dead daemon, just invoke the callback\n          callback()\n        } else {\n          // not connected\n          var error = new Error('Daemon was not running')\n          error.code = 'DAEMON_NOT_RUNNING'\n\n          callback(error)\n        }\n      }.bind(this, func, method)\n\n      // prepend user information to the remote method invocation\n      // it's probably dangerous to rely on this because it's easily faked\n      serverApi[method] = function (func) {\n        var args = Array.prototype.slice.call(arguments, 1)\n        args.unshift(process.getuid())\n        func.apply(func, args)\n      }.bind(this, func)\n    }\n\n    this._connected = true\n\n    callback(undefined, serverApi)\n  }.bind(this))\n  this._client.on('error', function (error) {\n    if (error.code === 'EACCES') {\n      error.message = \"I don't have permission to access \" + socket + ' - please run guvnor as a user that can.'\n\n      return callback(error)\n    } else if (error.code === 'ECONNREFUSED') {\n      this._logger.debug('Connection refused - the socket may be stale')\n\n      this._fs.unlink(socket, function (error) {\n        if (!error) {\n          this._logger.debug('Removed stale socket file')\n          error = new Error('Daemon was not running')\n          error.code = 'DAEMON_NOT_RUNNING'\n        }\n\n        callback(error)\n      }.bind(this))\n\n      return\n    } else if (error.code === 'ENOENT') {\n      this._logger.debug('Socket file did not exist - the daemon is probably not running')\n\n      error = new Error('Daemon was not running')\n      error.code = 'DAEMON_NOT_RUNNING'\n\n      return callback(error)\n    } else if (error.code === 'ENOTSOCK') {\n      return callback(new Error(socket + ' is not a socket - please check the guvnor.rundir property in your config file'))\n    }\n\n    if (this.connected) {\n      throw error\n    }\n\n    return callback(error)\n  }.bind(this))\n  this._client.on('end', function () {\n    this._connected = false\n  }.bind(this))\n}\n\nmodule.exports = LocalDaemonConnection\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/local/LocalDaemon.js":"var util = require('util')\nvar Autowire = require('wantsit').Autowire\nvar async = require('async')\nvar DaemonConnection = require('../common/DaemonConnection')\n\nvar LocalDaemon = function () {\n  DaemonConnection.call(this)\n\n  this._localDaemonStarter = Autowire\n  this._localDaemonAdminConnection = Autowire\n  this._localDaemonUserConnection = Autowire\n}\nutil.inherits(LocalDaemon, DaemonConnection)\n\nLocalDaemon.prototype._connect = function (callback) {\n  if (this._localDaemonUserConnection.connected) {\n    this._logger.debug('Already connected to daemon, executing callback')\n    process.nextTick(callback.bind(callback, undefined, this))\n\n    return\n  }\n\n  // try to connect to daemon\n  this._localDaemonUserConnection.connect(this._api, function (error, serverApi) {\n    if (error) {\n      callback(error)\n\n      return\n    }\n\n    // expose server user methods\n    for (var key in serverApi) {\n      this[key] = serverApi[key]\n    }\n\n    // reset process and app lists\n    this._processStore.removeAll()\n    this._appStore.removeAll()\n\n    this._overrideProcessInfoMethods()\n    this._overrideAppMethods()\n\n    this._localDaemonAdminConnection.connect(this._api, function (error, serverApi) {\n      if (error) {\n        if (error.code === 'EACCES') {\n          // this user cannot connect to the admin socket\n          this._logger.debug('Access to admin socket denied')\n          return callback(undefined, this)\n        } else {\n          return callback(error)\n        }\n      }\n\n      // expose server admin methods\n      for (var key in serverApi) {\n        this[key] = serverApi[key]\n      }\n\n      return callback(undefined, this)\n    }.bind(this))\n  }.bind(this))\n}\n\nLocalDaemon.prototype.connectOrStart = function (callback) {\n  this.connect(function (error, daemon) {\n    if (error && error.code === 'DAEMON_NOT_RUNNING') {\n      this._logger.debug('Daemon was not running so will start it')\n\n      this._localDaemonStarter.start(function (error) {\n        if (error) {\n          return callback(error)\n        }\n\n        this._logger.debug('Daemon started')\n\n        this.connect(callback)\n      }.bind(this))\n\n      return\n    }\n\n    return callback(error, daemon)\n  }.bind(this))\n}\n\nLocalDaemon.prototype.disconnect = function (callback) {\n  async.parallel([\n    this._localDaemonStarter.disconnect.bind(this._localDaemonStarter),\n    this._localDaemonUserConnection.disconnect.bind(this._localDaemonUserConnection),\n    this._localDaemonAdminConnection.disconnect.bind(this._localDaemonAdminConnection)\n  ], function (error) {\n    if (callback) {\n      callback(error)\n    }\n  })\n}\n\nLocalDaemon.prototype._connectToProcess = function (id, callback) {\n  if (!this._localDaemonUserConnection.connected) {\n    return callback(new Error('Not connected to remote daemon'))\n  }\n\n  this.findProcessInfoById(id, function (error, processInfo) {\n    if (error) return callback(error)\n    if (!processInfo) return callback()\n\n    if (!processInfo.socket) {\n      return callback(new Error('Process ' + processInfo.name + ' is not ready yet'))\n    }\n\n    processInfo.connect(callback)\n  })\n}\n\nmodule.exports = LocalDaemon\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/local/LocalDaemonStarter.js":"var Autowire = require('wantsit').Autowire\n\nvar LocalDaemonStarter = function () {\n  this._client = false\n  this._logger = Autowire\n  this._config = Autowire\n  this._freeport = Autowire\n  this._posix = Autowire\n  this._child_process = Autowire\n}\n\nLocalDaemonStarter.prototype.start = function (callback) {\n  this._logger.debug('Starting daemon')\n\n  if (this._config.debug.daemon) {\n    var port = parseInt(this._config.debug.daemon, 10)\n\n    if (isNaN(port)) {\n      // no explicit debug port specified so choose a free port number\n      this._freeport(function (error, port) {\n        if (error) {\n          return callback(error)\n        }\n\n        this._startDaemonWithDebugPort(callback, port)\n      }.bind(this))\n    } else {\n      // explicit port specified\n      this._startDaemonWithDebugPort(callback, port)\n    }\n  } else {\n    this._startDaemonWithDebugPort(callback)\n  }\n}\n\nLocalDaemonStarter.prototype._startDaemonWithDebugPort = function (callback, port) {\n  var execArgv = [require.resolve('../daemon')]\n\n  if (port) {\n    this._logger.warn('The daemon will wait for a debugger connection on port %d before continuing', port)\n    this._logger.warn('Please connect a debugger to this port (e.g. node-inspector or node-debugger)')\n    execArgv.unshift('--debug-brk=' + port)\n  }\n\n  this._daemon = this._child_process.spawn(process.execPath, execArgv, {\n    detached: this._config.daemonise && this._config.daemonize,\n    cwd: process.cwd(),\n    stdio: ['ipc', 'ignore', 'ignore'],\n    uid: this._posix.getpwnam(this._config.guvnor.user).uid,\n    gid: this._posix.getgrnam(this._config.guvnor.group).gid\n  })\n  // this._daemon.stderr.on('data', function(buffer) {\n  //  this._logger.error(buffer.toString())\n  // }.bind(this))\n  this._daemon.on('error', function (error) {\n    this._logger.debug('Daemon encountered error', error)\n\n    if (error.code === 'EPERM') {\n      // this usually happens when the daemon was started by a user that cannot switch\n      // to the user/group that the daemon is to run as\n      this._logger.error('Daemon encountered a permissions error - did you start Guvnor with the right user?')\n      process.exit(-1)\n    }\n  }.bind(this))\n  this._daemon.on('exit', function (code, signal) {\n    if (signal) {\n      this._logger.debug('Daemon process exited with code %d and signal %s', code, signal)\n    } else {\n      this._logger.debug('Daemon process exited with code', code)\n    }\n\n    this._tearDownDaemon()\n  }.bind(this))\n  this._daemon.on('close', function (event) {\n    this._logger.debug('Daemon process closed with code', event)\n\n    this._tearDownDaemon()\n  }.bind(this))\n  this._daemon.on('disconnect', function () {\n    this._logger.debug('Disconnected from Daemon process')\n  }.bind(this))\n  this._daemon.on('message', function (message) {\n    if (message.event === 'daemon:config:request') {\n      this._logger.debug('Daemon requested config')\n      this._daemon.send({ event: 'daemon:config:response', args: [this._config] })\n    } else if (message.event === 'daemon:ready') {\n      this._logger.debug('Daemon process online')\n      this._daemon.disconnect()\n\n      callback.apply(callback, [undefined].concat(message.args))\n      callback = null\n    } else if (message.event === 'daemon:fatality') {\n      this._logger.debug('Daemon process encountered uncaught exception')\n\n      this._daemon.kill()\n      this._tearDownDaemon()\n\n      var error = new Error(message.args[0].message)\n      error.code = message.args[0].code\n      error.stack = message.args[0].stack\n\n      if (error.code === 'EACCES') {\n        // this usually happens when the daemon was started by a non-privileged user and\n        // it fails to read a log file created by a privileged user on a previous run\n        error.message = 'Daemon encountered a permissions error - did you start Guvnor with the right user?'\n      }\n\n      if (callback) {\n        callback(error)\n        callback = null\n      } else {\n        throw error\n      }\n    } else {\n      this._logger.debug('Daemon sent unhandled message', message)\n    }\n  }.bind(this))\n\n  if (this._config.daemonise && this._config.daemonize) {\n    // do not wait fo the daemon to exit before this process can stop\n    this._daemon.unref()\n  } else {\n    process.on('exit', function () {\n      this._daemon.kill()\n    }.bind(this))\n    process.on('SIGINT', function () {\n      this._daemon.kill()\n    }.bind(this))\n  }\n}\n\nLocalDaemonStarter.prototype._tearDownDaemon = function () {\n  if (this._daemon) {\n    this._daemon.removeAllListeners('error')\n    this._daemon.removeAllListeners('exit')\n    this._daemon.removeAllListeners('close')\n    this._daemon.removeAllListeners('disconnect')\n    this._daemon.removeAllListeners('message')\n\n    if (this._config.daemonise && this._config.daemonize) {\n      if (this._daemon.connected) {\n        this._daemon.disconnect()\n      }\n\n      this._daemon = null\n    }\n  }\n}\n\nLocalDaemonStarter.prototype.disconnect = function (callback) {\n  this._tearDownDaemon()\n\n  callback()\n}\n\nmodule.exports = LocalDaemonStarter\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/remote/RemoteDaemon.js":"var util = require('util')\nvar Autowire = require('wantsit').Autowire\nvar timeoutify = require('timeoutify')\nvar DaemonConnection = require('../common/DaemonConnection')\n\nvar RemoteDaemon = function (host, port, principal, secret, timeout, rpcTimeout) {\n  DaemonConnection.call(this)\n\n  this._host = host\n  this._port = port\n  this._principal = principal\n  this._secret = secret\n  this._timeout = timeout\n  this._rpcTimeout = rpcTimeout\n  this._disconnecting = false\n\n  this._dnode = Autowire\n  this._crypto = Autowire\n  this._tls = Autowire\n}\nutil.inherits(RemoteDaemon, DaemonConnection)\n\nRemoteDaemon.prototype._connect = function (callback) {\n  if (this._connected) {\n    this._logger.debug('Already connected to daemon, executing callback')\n    process.nextTick(callback.bind(callback, undefined, this))\n  } else {\n    this._logger.debug('Will attempt to connect to daemon')\n    this._connectToDaemon(callback)\n  }\n}\n\nRemoteDaemon.prototype.disconnect = function (callback) {\n  if (!this._client) {\n    if (callback) {\n      process.nextTick(callback)\n    }\n\n    return\n  }\n\n  if (callback) {\n    this._client.once('end', callback)\n  }\n\n  if (this._disconnecting) {\n    return\n  }\n\n  this._disconnecting = true\n  this._client.once('end', function () {\n    delete this._client\n  }.bind(this))\n  this._client.end()\n}\n\nRemoteDaemon.prototype._signAndInvoke = function () {\n  var args = Array.prototype.slice.call(arguments)\n  var callback = args.shift()\n\n  this._crypto.sign(this._principal, this._secret, function (error, signature) {\n    if (error) {\n      return callback(error)\n    }\n\n    args.unshift(signature)\n\n    callback.apply(callback, args)\n  })\n}\n\nRemoteDaemon.prototype._connectToDaemon = function (callback) {\n  var api = {\n    sendEvent: function () {\n      this.emit.apply(this, arguments)\n    }.bind(this)\n  }\n\n  this._client = this._tls.connect(this._port, {\n    host: this._host,\n    rejectUnauthorized: false\n  }, function () {\n    var d = this._dnode(api, {\n      timeout: this._rpcTimeout\n    })\n    d.on('remote', function (remote) {\n      this._logger.info('Connected to Guvnor on %s:%d', this._host, this._port)\n      this._logger.debug('Exposing server methods')\n\n      for (var method in remote) {\n        if (typeof (remote[method]) !== 'function') {\n          continue\n        }\n\n        var func\n\n        if (method === 'deployApplication' ||\n          method === 'removeApplication' ||\n          method === 'runApplication' ||\n          method === 'switchApplicationRef' ||\n          method === 'updateApplicationRefs'\n        ) {\n          this._logger.debug('Exposing remote method without timeout', method)\n          func = remote[method].bind(remote)\n        } else {\n          this._logger.debug('Timeoutifying remote method', method)\n          func = timeoutify(remote[method].bind(remote), this._timeout)\n        }\n\n        this[method] = this._signAndInvoke.bind(this, func)\n      }\n\n      this._connected = true\n\n      // reset process and app lists\n      this._processStore.removeAll()\n      this._appStore.removeAll()\n\n      this._overrideProcessInfoMethods()\n      this._overrideAppMethods()\n\n      process.nextTick(callback.bind(callback, undefined, this))\n    }.bind(this))\n\n    this._client.pipe(d).pipe(this._client)\n  }.bind(this))\n\n  this._client.on('error', function (error) {\n    var clientError = new Error('Could not connect')\n\n    if (error.code === 'ECONNREFUSED') {\n      clientError.code = 'CONNECTIONREFUSED'\n\n      this._logger.info('Connection to %s:%d refused, will try again in a little while', this._host, this._port)\n      this._reconnect(callback)\n    } else if (error.code === 'ECONNRESET') {\n      clientError.code = 'CONNECTIONRESET'\n\n      this._logger.info('Connection to %s:%d reset, will try again in a little while', this._host, this._port)\n      this._reconnect(callback)\n    } else if (error.code === 'ENOTFOUND') {\n      clientError.code = 'HOSTNOTFOUND'\n\n      this._logger.info('Could not resolve IP address for %s, will try again in a little while', this._host)\n      this._reconnect(callback)\n    } else if (error.code === 'ETIMEDOUT') {\n      clientError.code = 'TIMEDOUT'\n\n      this._logger.info('Connection to %s timed out, will try again in a little while', this._host)\n      this._reconnect(callback)\n    } else if (error.code === 'ENETDOWN') {\n      clientError.code = 'NETWORKDOWN'\n\n      this._logger.info('Your network connection went down, will try to connect to %s again in a little while', this._host)\n      this._reconnect(callback)\n    } else {\n      this._logger.error(error.stack ? error.stack : error)\n    }\n\n    process.nextTick(callback.bind(callback, clientError))\n  }.bind(this))\n  this._client.on('end', function () {\n    if (!this._disconnecting) {\n      this._logger.info('Guvnor %s:%d unexpectedly disconnected, will reconnect in a little while', this._host, this._port)\n      this._reconnect(callback)\n    }\n\n    this.emit('disconnected')\n  }.bind(this))\n  this._client.on('fail', function () {\n    this._logger.info('Connection failed')\n  }.bind(this))\n}\n\nRemoteDaemon.prototype._reconnect = function (callback) {\n  if (this._reconnectTimeout) {\n    return\n  }\n\n  this._reconnectTimeout = setTimeout(function () {\n    delete this._reconnectTimeout\n    this._connectToDaemon(callback)\n  }.bind(this), 5000)\n}\n\nRemoteDaemon.prototype.connectToProcess = function (processId, callback) {\n  this._logger.warn('Deprecation warning: connectToProcess will be removed in a future release, please use methods on process objects instead')\n\n  this._connectToProcess(processId, function (error, remoteProcess) {\n    var remote\n\n    if (!error) {\n      remote = {}\n\n      for (var key in remoteProcess) {\n        // don't timeoutify slow methods\n        if (key === 'dumpHeap' || key === 'deployApplication' || key === 'removeApplication' || key === 'switchApplicationRef' || key === 'updateApplicationRefs' || key === 'fetchHeapSnapshot') {\n          remote[key] = remoteProcess[key]\n        } else {\n          remote[key] = timeoutify(remoteProcess[key].bind(remoteProcess), this._timeout)\n        }\n      }\n    }\n\n    process.nextTick(callback.bind(callback, error, remote))\n  }.bind(this))\n}\n\nmodule.exports = RemoteDaemon\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/remote/RemoteProcess.js":"var util = require('util')\nvar ManagedProcess = require('../common/ManagedProcess')\n\nvar RemoteProcess = function (info, daemon) {\n  ManagedProcess.call(this)\n\n  Object.defineProperty(this, '_daemon', {\n    value: daemon\n  })\n}\nutil.inherits(RemoteProcess, ManagedProcess)\n\nRemoteProcess.prototype.connect = function (callback) {\n  this.once('_connected', callback)\n\n  this._daemon._connectToProcess(this.id, function (error, remote) {\n    if (!error) {\n      this._bindRemoteMethods(remote)\n    }\n\n    this._connected = true\n\n    this.emit('_connected', error, this)\n  }.bind(this))\n}\n\nRemoteProcess.prototype.disconnect = function (callback) {\n  if (this._rpc.disconnect) {\n    this._rpc.disconnect(ManagedProcess.prototype.disconnect.bind(this, callback))\n    this._connected = false\n  } else {\n    ManagedProcess.prototype.disconnect.call(this, callback)\n  }\n}\n\nmodule.exports = RemoteProcess\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/web/GuvnorWeb.js":"var Container = require('wantsit').Container\nvar ObjectFactory = require('wantsit').ObjectFactory\nvar logger = require('andlog')\n\nvar GuvnorWeb = function () {\n\n}\n\nGuvnorWeb.prototype.start = function () {\n  process.title = 'guvnor-web'\n\n  // make errors a little more descriptive\n  process.on('uncaughtException', function (error) {\n    console.error('Uncaught error', error.message)\n    console.error(error.stack ? error.stack : 'No stack trace available')\n\n    process.exit(1)\n  })\n\n  process.on('SIGABRT', function () {\n    console.error('Received SIGABRT')\n  })\n\n  // create container\n  var container = new Container({\n    timeout: 0\n  })\n  container.on('error', function (error) {\n    console.warn('Container error:', error.message || error.message.stack)\n  })\n\n  // parse configuration\n  container.createAndRegister('config', require('./components/Configuration'))\n  container.register('logger', logger)\n  container.register('posix', require('posix'))\n  container.register('remote', require('../remote'))\n  container.register('webSocketResponder', {\n    broadcast: function () {}\n  })\n  container.register('moonbootsConfig', {\n    'isDev': process.env.NODE_ENV === 'development'\n  })\n  container.createAndRegister('hostDataFactory', ObjectFactory, [require('./domain/HostData')])\n  container.createAndRegister('processDataFactory', ObjectFactory, [require('./domain/ProcessData')])\n  container.createAndRegister('hostList', require('./components/HostList'))\n  container.createAndRegister('server', require('./Server'))\n\n  // optional dependency, don't care if it fails\n  try {\n    container.register('mdns', require('mdns'))\n  } catch (e) {\n    logger.info('Failed to register mdns component. If running Linux, please run `$ sudo apt-get install libavahi-compat-libdnssd-dev` before installing guvnor.')\n    logger.info(e.stack)\n  }\n}\n\nmodule.exports = GuvnorWeb\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/web/moonboots.js":"var path = require('path')\nvar stylizer = require('stylizer')\nvar templatizer = require('templatizer-hbs')\n\n// for reuse\nvar appDir = path.resolve(__dirname + '/../../web/client')\nvar cssDir = path.resolve(__dirname + '/../../web/public/css')\nvar javascriptDir = path.resolve(__dirname + '/../../web/public/javascript')\nvar templateDir = path.resolve(__dirname + '/../../web/templates')\n\nmodule.exports = function (config) {\n  return {\n    // Tell the Hapi server what URLs the application should be served from.\n    // Since we're doing clientside routing we want to serve this from some type\n    // of wildcard url.\n    // examples:\n    //     '/{p*}' - match everything that isn't matched by something more specific\n    //     '/dashboard/{p*}' - serve the app at all routes starting with '/dashboard'\n    appPath: '/{p*}',\n    appConfig: {\n      auth: 'simple'\n    },\n\n    // The moonboots config\n    moonboots: {\n      // The base name of the javascript file served in the <script src=\"the_name.*.js\">\n      jsFileName: 'guvnor-web',\n      // The base name of the css file served in the <link rel=\"stylesheet\" src=\"the_name.*.css\">\n      cssFileName: 'guvnor-web',\n      main: appDir + '/app.js',\n      developmentMode: config.isDev,\n      // Specify any non-commonjs libraries we wish to include.\n      // You can think of this as your list of <script> tags in your HTML.\n      // These will simply be included before any of your application code in the\n      // order you provide them. So for example, if you're using jQuery make sure\n      // you list any plugins after jQuery itself.\n      libraries: [\n        javascriptDir + '/jquery/jquery-1.11.1' + (config.isDev ? '.src' : '') + '.js',\n        javascriptDir + '/bootstrap/bootstrap-3.3.1' + (config.isDev ? '.src' : '') + '.js',\n        javascriptDir + '/highcharts/highcharts' + (config.isDev ? '.src' : '') + '.js',\n        javascriptDir + '/highcharts/highcharts-more' + (config.isDev ? '.src' : '') + '.js',\n        javascriptDir + '/highcharts/modules/solid-gauge' + (config.isDev ? '.src' : '') + '.js'\n      ],\n      // Specify the stylesheets we want to bundle\n      stylesheets: [\n        cssDir + '/darkstrap.css',\n        cssDir + '/font-awesome.css',\n        cssDir + '/font-mfizz.css',\n        cssDir + '/app.css'\n      ],\n      beforeBuildJS: function (done) {\n        // We only want to do this in dev mode. If it's not in dev mode, this\n        // function will only be run once.\n        if (!config.isDev) {\n          return done()\n        }\n\n        // This re-builds our template files from jade each time the app's main\n        // js file is requested. Which means you can seamlessly change jade and\n        // refresh in your browser to get new templates.\n        templatizer(templateDir + '/**/*.hbs', appDir + '/templates.js', {\n          uglify: true\n        }, done)\n      },\n      beforeBuildCSS: function (done) {\n        // We only want to do this in dev mode. If it's not in dev mode, this\n        // function will only be run once.\n        if (!config.isDev) {\n          return done()\n        }\n        // Re-compile stylus to css each time the app's main css file is requested.\n        // In addition there's a \"watch\" option that will make stylizer also be able\n        // to talk to live reload (http://livereload.com/) browser plugins for sneakily\n        // refreshing styles without waiting for you to refresh or running/configuring\n        // the live reload app.\n        stylizer({\n          infile: cssDir + '/app.styl',\n          outfile: cssDir + '/app.css',\n          development: config.isDev,\n          // Beware there's an issue with watch on OSX that causes issues with\n          // watch if you're not running node 0.10.25 or later.\n          watch: cssDir + '/**/*.styl'\n        }, done)\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/lib/web/Server.js":"var Autowire = require('wantsit').Autowire\nvar async = require('async')\nvar fs = require('fs')\nvar pem = require('pem')\nvar http = require('http')\nvar os = require('os')\nvar Hapi = require('hapi')\nvar BasicAuth = require('hapi-auth-basic')\nvar Columbo = require('columbo')\nvar bcrypt = require('bcrypt')\nvar SocketIO = require('socket.io')\nvar path = require('path')\nvar MoonBootsHapi = require('moonboots_hapi')\nvar MoonBootsConfig = require('./moonboots')\n\nvar Server = function () {\n  this._logger = Autowire\n  this._config = Autowire\n  this._moonbootsConfig = Autowire\n}\n\nServer.prototype.containerAware = function (container) {\n  this._container = container\n}\n\nServer.prototype.afterPropertiesSet = function (done) {\n  if (this._moonbootsConfig.isDev) {\n    this._logger.info('guvnor-web is running in DEVELOPMENT mode')\n  }\n\n  var tasks = []\n\n  if (this._config.https.enabled) {\n    if (this._config.https.key && this._config.https.certificate) {\n      tasks.push(this._readCertificates.bind(this))\n    } else {\n      tasks.push(this._generateCertificates.bind(this))\n    }\n\n    if (this._config.https.upgrade) {\n      tasks.push(this._startHttpsRedirectServer.bind(this))\n    }\n  } else {\n    this._logger.info('HTTPS is disabled')\n  }\n\n  async.series(tasks, function (error, result) {\n    if (error) {\n      throw error\n    }\n\n    var options = {\n      address: this._config.http.listen,\n      port: this._config.http.port,\n      host: 'localhost'\n    }\n\n    if (this._config.https.enabled) {\n      options.tls = {\n        key: result[0].serviceKey,\n        cert: result[0].certificate,\n        passphrase: result[0].passphrase,\n        ciphers: 'ECDHE-RSA-AES256-SHA:AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM',\n        honorCipherOrder: true\n      }\n\n      options.address = this._config.https.listen\n      options.port = this._config.https.port\n    }\n\n    var hapi = new Hapi.Server()\n    hapi.connection(options)\n    hapi.state('config', {\n      ttl: null,\n      isSecure: this._config.https.enabled,\n      encoding: 'none'\n    })\n    hapi.ext('onPreResponse', function setClacksOverhead (request, reply) {\n      if (request.response instanceof Error) {\n        return reply.continue()\n      }\n\n      // http://np.reddit.com/r/discworld/comments/2yt9j6/gnu_terry_pratchett/\n      request.response.header('X-Clacks-Overhead', 'GNU Terry Pratchett')\n\n      return reply.continue()\n    })\n    hapi.ext('onPreResponse', function setConfigCookie (request, reply) {\n      if (request.response instanceof Error) {\n        return reply.continue()\n      }\n\n      var cookie\n\n      if (request.state && request.state.config) {\n        try {\n          cookie = JSON.parse(decodeURIComponent(request.state.config))\n        } catch (error) {\n          // don't care if the cookie is invalid\n        }\n      }\n\n      if (!cookie || !cookie.auth) {\n        // copy the this._config\n        var clientConfig = JSON.parse(JSON.stringify(this._config.client))\n\n        // add the auth\n        clientConfig.auth = request.auth.credentials\n\n        // encode the cookie\n        cookie = encodeURIComponent(JSON.stringify(clientConfig))\n\n        // set the cookie\n        return reply(request.response.state('config', cookie))\n      }\n\n      return reply.continue()\n    }.bind(this))\n\n    async.auto({\n      add_auth: function (callback) {\n        hapi.register(BasicAuth, function (error) {\n          hapi.auth.strategy('simple', 'basic', {\n            validateFunc: this._validateUser.bind(this)\n          })\n          callback(error)\n        }.bind(this))\n      }.bind(this),\n      add_rest: ['add_auth', function (callback) {\n        var columbo = new Columbo({\n          resourceDirectory: path.resolve(__dirname + '/resources'),\n          resourceCreator: function (resource, name, callback) {\n            this._container.createAndRegister(name, resource, function (error, result) {\n              callback(error, result)\n            })\n          }.bind(this),\n          preProcessor: function (resource, callback) {\n            // secure resources\n            resource.config = {\n              auth: 'simple'\n            }\n\n            callback(undefined, resource)\n          },\n          logger: this._logger\n        })\n        columbo.discover(function (error, resources) {\n          if (error) return callback(error)\n\n          hapi.route(resources)\n          callback()\n        })\n      }.bind(this)],\n      add_moonboots: ['add_auth', function (callback) {\n        hapi.register({\n          register: MoonBootsHapi,\n          options: MoonBootsConfig(this._moonbootsConfig)\n        }, callback)\n      }.bind(this)],\n      add_static: ['add_auth', function (callback) {\n        hapi.route({\n          method: 'GET',\n          path: '/images/{param*}',\n          handler: {\n            directory: {\n              path: path.resolve(__dirname + '/../../web/public/images')\n            }\n          },\n          config: {\n            auth: 'simple'\n          }\n        })\n        hapi.route({\n          method: 'GET',\n          path: '/fonts/{param*}',\n          handler: {\n            directory: {\n              path: path.resolve(__dirname + '/../../web/public/fonts')\n            }\n          },\n          config: {\n            auth: 'simple'\n          }\n        })\n        hapi.route({\n          method: 'GET',\n          path: '/apple-touch-icon.png',\n          handler: function (request, reply) {\n            reply.file(path.resolve(__dirname + '/../../web/public/apple-touch-icon.png'))\n          },\n          config: {\n            auth: 'simple'\n          }\n        })\n\n        callback()\n      }]\n    }, function (error) {\n      if (error) return done(error)\n\n      hapi.start(function (error) {\n        if (error) return done(error)\n\n        this._logger.info('guvnor-web is running at: http%s://%s:%d', this._config.https.enabled ? 's' : '', hapi.info.host === '0.0.0.0' ? 'localhost' : hapi.info.host, hapi.info.port)\n\n        // web sockets\n        this._container.register('webSocket', SocketIO.listen(hapi.listener))\n        this._container.createAndRegister('webSocketResponder', require('./components/WebSocketResponder'))\n\n        this._container.once('ready', function () {\n          this._logger.info('guvnor-web ready')\n        }.bind(this))\n\n        done()\n      }.bind(this))\n    }.bind(this))\n  }.bind(this))\n}\n\nServer.prototype._generateCertificates = function (callback) {\n  this._logger.info('Generating SSL key and certificate')\n  pem.createCertificate({\n    days: 365,\n    selfSigned: true\n  }, callback)\n}\n\nServer.prototype._readCertificates = function (callback) {\n  this._logger.info('Reading SSL key and certificate')\n\n  async.parallel([\n    fs.readFile.bind(fs, this._config.https.key, {\n      encoding: 'utf8'\n    }),\n    fs.readFile.bind(fs, this._config.https.certificate, {\n      encoding: 'utf8'\n    })\n  ], function (error, result) {\n    callback(error, {\n      serviceKey: result[0],\n      certificate: result[1],\n      passphrase: this._config.https.passphrase\n    })\n  }.bind(this))\n}\n\nServer.prototype._startHttpsRedirectServer = function (callback) {\n  this._logger.info('Starting HTTP -> HTTPS upgrade server')\n\n  http.createServer(function (request, response) {\n    var host = request.headers.host\n\n    if (!host) {\n      host = os.hostname()\n    } else {\n      host = host.split(':')[0]\n    }\n\n    // create an app that will redirect all requests to the https version\n    var httpsUrl = 'https://' + host\n\n    if (this._config.https.port !== 443) {\n      httpsUrl += ':' + this._config.https.port\n    }\n\n    if (request.url) {\n      httpsUrl += request.url\n    }\n\n    response.setHeader('location', httpsUrl)\n    response.statusCode = 302\n    response.end()\n  }.bind(this)).listen(this._config.http.port, this._config.http.host, function () {\n    this._logger.info('HTTP -> HTTPS upgrade server listening on port', this._config.http.port)\n\n    callback()\n  }.bind(this))\n}\n\nServer.prototype._validateUser = function (username, password, callback) {\n  var user = this._config.users[username]\n\n  if (!user) {\n    return callback(null, false)\n  }\n\n  bcrypt.compare(password, user.password, function (error, isValid) {\n    callback(error, isValid, {\n      user: username\n    })\n  })\n}\n\nmodule.exports = Server\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/app.js":"var config = require('clientconfig')\nvar Router = require('./router')\nvar MainView = require('./views/main')\nvar Hosts = require('./models/hosts')\nvar domReady = require('domready')\nvar User = require('./models/user')\n\nmodule.exports = {\n  // this is the the whole app initialiser\n  blastoff: function () {\n    setInterval(function () {\n      if (!config.auth) {\n        config.toString()\n      }\n    }, 1000)\n\n    window.app = this\n    window.app.socket = require('./helpers/socket')\n    window.app.user = new User()\n    window.app.user.name = config.auth.user\n    window.app.router = new Router()\n\n    // wait for document ready to render our main view\n    // this ensures the document has a body, etc\n    domReady(function () {\n      window.loadingHostList = true\n\n      // create an empty collection for our host models\n      window.app.hosts = new Hosts()\n\n      // init our main view\n      var main = window.app.view = new MainView({\n        el: document.body,\n        model: window.app.user\n      })\n\n      // ...and render it\n      main.render()\n\n      window.app.modal = main.modal\n\n      // n.b. main.render() must be called before we add the once listener, otherwise the host list\n      // gets populated after we've bounced the user to the first host and it'll never get highlighted.\n      window.app.hosts.once('add', function (host) {\n        window.app.navigate('/host/' + host.name)\n      })\n\n      // we have what we need, we can now start our router and show the appropriate page\n      window.app.router.history.start()\n    })\n  },\n\n  // This is how you navigate around the app.\n  // this gets called by a global click handler that handles\n  // all the <a> tags in the app.\n  // it expects a url without a leading slash.\n  // for example: \"costello/settings\".\n  navigate: function (page) {\n    var url = (page.charAt(0) === '/') ? page.slice(1) : page\n    this.router.history.navigate(url, {trigger: true})\n  }\n}\n\n// run it\nmodule.exports.blastoff()\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/router.js":"var Router = require('ampersand-router')\nvar HostOverviewPage = require('./pages/host/overview')\nvar AppsPage = require('./pages/host/apps')\nvar ConnectionRefusedPage = require('./pages/host/connectionrefused')\nvar TimeoutPage = require('./pages/host/timeout')\nvar ConnectingPage = require('./pages/host/connecting')\nvar BadSignaturePage = require('./pages/host/badsignature')\nvar IncompatiblePage = require('./pages/host/incompatible')\nvar HostNotFoundPage = require('./pages/host/hostnotfound')\nvar NetworkDownPage = require('./pages/host/networkdown')\nvar ErrorPage = require('./pages/host/error')\nvar ErrorConnectingPage = require('./pages/host/errorconnecting')\nvar ProcessesPage = require('./pages/host/processes')\nvar ProcessOverviewPage = require('./pages/process/overview')\nvar ProcessLogsPage = require('./pages/process/logs')\nvar ProcessExceptionsPage = require('./pages/process/exceptions')\nvar ProcessSnapshotsPage = require('./pages/process/snapshots')\nvar ProcessStartingPage = require('./pages/process/starting')\nvar ProcessStartedPage = require('./pages/process/started')\nvar ProcessStoppingPage = require('./pages/process/stopping')\nvar ProcessStoppedPage = require('./pages/process/stopped')\nvar ProcessAbortedPage = require('./pages/process/aborted')\nvar ProcessUninitialisedPage = require('./pages/process/uninitialised')\nvar ProcessUnresponsivePage = require('./pages/process/unresponsive')\nvar ProcessRestartingPage = require('./pages/process/restarting')\nvar ProcessFailedPage = require('./pages/process/failed')\nvar ProcessErroredPage = require('./pages/process/errored')\nvar ProcessPausedPage = require('./pages/process/paused')\nvar NoHostsPage = require('./pages/nohosts')\nvar LoadingHostsPage = require('./pages/loadinghosts')\n\nmodule.exports = Router.extend({\n  routes: {\n    'host/:host': 'host',\n    'host/:host/connected': 'host',\n    'host/:host/connecting': 'hostConnecting',\n    'host/:host/timeout': 'hostTimeout',\n    'host/:host/badsignature': 'hostBadSignature',\n    'host/:host/incompatible': 'hostIncompatible',\n    'host/:host/notfound': 'hostNotFound',\n    'host/:host/connectionreset': 'host',\n    'host/:host/connectionrefused': 'hostConnectionRefused',\n    'host/:host/networkdown': 'hostNetworkDown',\n    'host/:host/errorconnecting': 'hostErrorConnecting',\n    'host/:host/error': 'hostError',\n    'host/:host/apps': 'hostAppList',\n    'host/:host/processes': 'hostProcessList',\n    'host/:host/process/:process': 'processRunning',\n    'host/:host/process/:process/logs': 'processLogs',\n    'host/:host/process/:process/exceptions': 'processExceptions',\n    'host/:host/process/:process/snapshots': 'processSnapshots',\n    'host/:host/process/:process/stopped': 'processStopped',\n    'host/:host/process/:process/stopping': 'processStopping',\n    'host/:host/process/:process/aborted': 'processAborted',\n    'host/:host/process/:process/starting': 'processStarting',\n    'host/:host/process/:process/started': 'processStarted',\n    'host/:host/process/:process/running': 'processRunning',\n    'host/:host/process/:process/uninitialised': 'processUninitialised',\n    'host/:host/process/:process/unresponsive': 'processUnresponsive',\n    'host/:host/process/:process/restarting': 'processRestarting',\n    'host/:host/process/:process/failed': 'processFailed',\n    'host/:host/process/:process/errored': 'processErrored',\n    'host/:host/process/:process/paused': 'processPaused',\n    '': 'catchAll',\n    '(*path)': 'catchAll'\n  },\n\n  host: function (hostName) {\n    this._withHost(hostName, HostOverviewPage)\n  },\n\n  hostConnecting: function (hostName) {\n    this._withHost(hostName, ConnectingPage)\n  },\n\n  hostConnectionRefused: function (hostName) {\n    this._withHost(hostName, ConnectionRefusedPage)\n  },\n\n  hostTimeout: function (hostName) {\n    this._withHost(hostName, TimeoutPage)\n  },\n\n  hostBadSignature: function (hostName) {\n    this._withHost(hostName, BadSignaturePage)\n  },\n\n  hostIncompatible: function (hostName) {\n    this._withHost(hostName, IncompatiblePage)\n  },\n\n  hostNotFound: function (hostName) {\n    this._withHost(hostName, HostNotFoundPage)\n  },\n\n  hostNetworkDown: function (hostName) {\n    this._withHost(hostName, NetworkDownPage)\n  },\n\n  hostErrorConnecting: function (hostName) {\n    this._withHost(hostName, ErrorConnectingPage)\n  },\n\n  hostError: function (hostName) {\n    this._withHost(hostName, ErrorPage)\n  },\n\n  hostAppList: function (hostName) {\n    this._withHost(hostName, AppsPage, '/apps')\n  },\n\n  hostProcessList: function (hostName) {\n    this._withHost(hostName, ProcessesPage, '/processes')\n  },\n\n  processRunning: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessOverviewPage)\n  },\n\n  processLogs: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessLogsPage, '/logs')\n  },\n\n  processExceptions: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessExceptionsPage, '/exceptions')\n  },\n\n  processSnapshots: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessSnapshotsPage, '/snapshots')\n  },\n\n  processStopping: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessStoppingPage)\n  },\n\n  processStopped: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessStoppedPage)\n  },\n\n  processAborted: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessAbortedPage)\n  },\n\n  processStarting: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessStartingPage)\n  },\n\n  processStarted: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessStartedPage)\n  },\n\n  processUninitialised: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessUninitialisedPage)\n  },\n\n  processUnresponsive: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessUnresponsivePage)\n  },\n\n  processRestarting: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessRestartingPage)\n  },\n\n  processFailed: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessFailedPage)\n  },\n\n  processErrored: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessErroredPage)\n  },\n\n  processPaused: function (hostName, processId) {\n    this._withHostAndProcess(hostName, processId, ProcessPausedPage)\n  },\n\n  catchAll: function () {\n    if (window.loadingHostList) {\n      return this.trigger('page', new LoadingHostsPage())\n    } else if (window.app.hosts.models.length === 0) {\n      return this.trigger('page', new NoHostsPage())\n    }\n\n    this.redirectTo('/host/' + window.app.hosts.at(0).name)\n  },\n\n  _withHost: function (hostName, Page, suffix) {\n    window.app.host = window.app.hosts.get(hostName)\n\n    if (!window.app.host) {\n      return this.redirectTo('/')\n    }\n\n    this.trigger('page', new Page({\n      model: window.app.host\n    }))\n\n    window.app.view.setActiveNav('/host/' + hostName + (suffix ? suffix : ''))\n  },\n\n  _withHostAndProcess: function (hostName, processId, Page, suffix) {\n    window.app.host = window.app.hosts.get(hostName)\n\n    if (!window.app.host) {\n      return this.redirectTo('/')\n    }\n\n    var process = window.app.host.processes.get(processId)\n\n    if (!process) {\n      return this.redirectTo('/')\n    }\n\n    this.trigger('page', new Page({\n      model: process\n    }))\n\n    window.app.view.setActiveNav('/host/' + hostName + '/process/' + processId + (suffix ? suffix : ''))\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/pages/host/overview.js":"var HostPage = require('../host')\nvar templates = require('../../templates')\nvar SystemDataView = require('../../views/host/system')\nvar ResourceDataView = require('../../views/host/resources')\n\nmodule.exports = HostPage.extend({\n  template: templates.pages.host.overview,\n  subviews: {\n    system: {\n      container: '[data-hook=system]',\n      prepareView: function (el) {\n        return new SystemDataView({\n          model: this.model,\n          el: el\n        })\n      }\n    },\n    resources: {\n      container: '[data-hook=resources]',\n      prepareView: function (el) {\n        return new ResourceDataView({\n          model: this.model,\n          el: el\n        })\n      }\n    }\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/pages/host.js":"var PageView = require('./base')\n\nfunction endsWith (haystack, needle) {\n  return haystack.substring(haystack.length - needle.length) === needle\n}\n\nmodule.exports = PageView.extend({\n  initialize: function () {\n    // if this host is removed from the collection while we are looking at it, redirect the user to the overview\n    this.listenTo(window.app.hosts, 'remove', function (host) {\n      if (host.name === this.model.name) {\n        window.app.navigate('/')\n      }\n    })\n  },\n  bindings: {\n    'model.name': '[data-hook=host-name]',\n    'model.status': {\n      type: function (el, value) {\n        if (value === 'connected' && (endsWith(window.location.href, 'apps') || endsWith(window.location.href, 'processes'))) {\n          return\n        }\n\n        // if the status of a process changes while we are watching it, redirect the\n        // user to a page with an appropriate message\n        if (endsWith(window.location.href, value)) {\n          return\n        }\n\n        // dirty looking setTimeout because the first time this code gets run, we\n        // are inside the router.trigger callback for the default page and probably\n        // haven't finished displaying it yet..\n        setTimeout(window.app.navigate.bind(window.app, '/host/' + this.model.name + '/' + value), 1)\n      }\n    }\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/pages/base.js":"// base view for pages\nvar View = require('ampersand-view')\n\nmodule.exports = View.extend({\n  // register keyboard handlers\n  registerKeyboardShortcuts: function () {\n    /*\n     var self = this\n     _.each(this.keyboardShortcuts, function (value, k) {\n     // register key handler scoped to this page\n     key(k, self.cid, _.bind(self[value], self))\n     })\n     key.setScope(this.cid)\n     */\n  },\n  unregisterKeyboardShortcuts: function () {\n    // key.deleteScope(this.cid)\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-guvnor/node_modules/guvnor/web/client/templates.js":"var Handlebars=require(\"handlebars\");module.exports.buttons={},module.exports.buttons.debug=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"debugbutton\"><i class=\"fa fa-bug\"></i> Debug</button>\\n'},useData:!0}),module.exports.body=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<body>\\n  <div data-hook=\"modal\"></div>\\n  <div id=\"wrapper\">\\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\\n      <div class=\"navbar-header\">\\n        <button type=\"button\" class=\"navbar-toggle\" data-hook=\"toggle-nav\">\\n          <span class=\"sr-only\">Toggle navigation</span>\\n          <span class=\"icon-bar\"></span>\\n          <span class=\"icon-bar\"></span>\\n          <span class=\"icon-bar\"></span>\\n        </button>\\n        <span class=\"navbar-brand\" href=\"/\">The Guv\\'nor</span>\\n        <small>Hello '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</small>\\n      </div>\\n      <div class=\"collapse navbar-collapse\" data-hook=\"nav-container\">\\n        <ul class=\"nav navbar-nav side-nav host-list\" data-hook=\"host-list\">\\n        </ul>\\n      </div>\\n    </nav>\\n    <div id=\"nav-shadow\"></div>\\n    <div id=\"page-wrapper\" data-hook=\"page-container\"></div>\\n    <footer>\\n      <small><a href=\"http://github.com/tableflip/guvnor\" class=\"guvnor-web\">guvnor</a> <span data-hook=\"version\">5</span> by <a href=\"http://tableflip.io\" class=\"tableflip\">TABLEFLIP</a></small>\\n      <small>A side effect of the JavaScript Adventure Club</small>\\n    </footer>\\n  </div>\\n</body>\\n'},useData:!0}),module.exports.buttons.gc=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"gcbutton\"><i class=\"fa fa-trash\"></i> Garbage collect</button>\\n'},useData:!0}),module.exports.buttons.restart=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"restartbutton\"><i class=\"fa fa-refresh\"></i> Restart</button>\\n'},useData:!0}),module.exports.buttons.remove=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-danger btn-xs\" data-hook=\"removebutton\"><i class=\"fa fa-remove\"></i> Remove</button>\\n'},useData:!0}),module.exports.buttons.snapshot=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"snapshotbutton\"><i class=\"fa fa-bar-chart\"></i> Take snapshot</button>\\n'},useData:!0}),module.exports.buttons.start=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-success btn-xs\" data-hook=\"startbutton\"><i class=\"fa fa-play\"></i> Start</button>\\n'},useData:!0}),module.exports.buttons.stop=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"stopbutton\"><i class=\"fa fa-stop\"></i> Stop</button>\\n'},useData:!0}),module.exports.buttons.workeradd=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"addworkerbutton\"><i class=\"fa fa-plus\"></i> Add worker</button>\\n'},useData:!0}),module.exports.buttons.workerremove=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<button type=\"button\" class=\"btn btn-default btn-xs\" data-hook=\"removeworkerbutton\"><i class=\"fa fa-minus\"></i> Remove worker</button>\\n'},useData:!0}),module.exports.forms={},module.exports.forms.controls={},module.exports.forms.controls.array=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"form-group\">\\n  <label data-hook=\"label\"></label>\\n  <div data-hook=\"field-container\"></div>\\n  <a data-hook=\"add-field\" class=\"add-field\"><i class=\"fa fa-plus-circle\"></i> add</a>\\n  <div data-hook=\"main-message-container\">\\n    <div class=\"alert alert-danger\" data-hook=\"main-message-text\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.forms.controls.checkbox=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"form-group\">\\n  <label data-hook=\"label\"></label>\\n  <input class=\"form-control\" type=\"checkbox\"/>\\n  <div data-hook=\"message-container\">\\n    <div class=\"alert alert-danger\" data-hook=\"message-text\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.forms.controls.element=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"row\">\\n  <div class=\"col-xs-5\">\\n    <input data-hook=\"key\">\\n  </div>\\n  <div class=\"col-xs-5\">\\n    <input data-hook=\"value\">\\n  </div>\\n  <div class=\"col-xs-2\">\\n    <a data-hook=\"remove-field\" class=\"remove-field\"><i class=\"fa fa-minus-circle\"></i> remove</a>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.forms.controls.input=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"form-group\">\\n  <label data-hook=\"label\"></label>\\n  <input class=\"form-control\" type=\"text\"/>\\n  <div data-hook=\"message-container\">\\n    <div class=\"alert alert-danger\" data-hook=\"message-text\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.forms.controls.select=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"form-group\">\\n  <label data-hook=\"label\"></label>\\n  <select class=\"form-control\"></select>\\n  <div data-hook=\"message-container\">\\n    <div class=\"alert alert-danger\" data-hook=\"message-text\"></div>\\n  </div>\\n</div>'},useData:!0}),module.exports.forms.controls.tuple=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"form-group\">\\n  <input class=\"form-control\">\\n  <div data-hook=\"field-container\"></div>\\n  <a data-hook=\"remove-field\">remove</a>\\n  <div data-hook=\"message-container\">\\n    <div class=\"alert alert-danger\" data-hook=\"message-text\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.head=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0\"/>\\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\\n<meta name=\"mobile-web-app-capable\" content=\"yes\"/>\\n<script src=\"/socket.io/socket.io.js\"></script>\\n'},useData:!0}),module.exports.includes={},module.exports.includes.apps={},module.exports.includes.apps.app=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<tr>\\n  <td class=\"name\" data-hook=\"name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</td>\\n  <td class=\"user\" data-hook=\"user\">'+o(l(null!=(s=null!=e?e.model:e)?s.user:s,e))+'</td>\\n  <td class=\"ref\" data-hook=\"ref\">'+o(l(null!=(s=null!=e?e.model:e)?s.ref:s,e))+'</td>\\n  <td class=\"url\" data-hook=\"url\">'+o(l(null!=(s=null!=e?e.model:e)?s.url:s,e))+'</td>\\n  <td class=\"remove\" data-hook=\"remove\">\\n    <button type=\"button\" class=\"btn btn-success btn-xs start\" data-hook=\"startbutton\"><i class=\"fa fa-play\"></i> Start</button>\\n    <button type=\"button\" class=\"btn btn-danger btn-xs remove\" data-hook=\"removebutton\"><i class=\"fa fa-remove\"></i> Remove</button>\\n    <button type=\"button\" class=\"btn btn-default btn-xs update\" data-hook=\"updatebutton\"><i class=\"fa fa-refresh\"></i> Update</button>\\n    <button type=\"button\" class=\"btn btn-default btn-xs update\" data-hook=\"setbutton\"><i class=\"fa fa-exchange\"></i> Set ref</button>\\n  </td>\\n</tr>\\n'},useData:!0}),module.exports.includes.apps.console=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<ul data-hook=\"log\" class=\"install-log\"></ul>\\n'},useData:!0}),module.exports.includes.apps.empty=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<tr>\\n  <td colspan=\"5\">No apps are installed</td>\\n</tr>'},useData:!0}),module.exports.includes.apps.install=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<form>\\n  <p>To install an app, specify a git url that contains a package.json file at it\\'s root.</p>\\n  <p>If you omit the app name, it will be taken from the package.json file.</p>\\n  <hr>\\n  <fieldset data-hook=\"field-container\"></fieldset>\\n  <hr>\\n  <div class=\"buttons\">\\n    <button class=\"btn btn-default\" data-hook=\"cancel-button\" type=\"button\">Cancel</button>\\n    <button class=\"btn btn-primary\" data-hook=\"submit-button\" type=\"submit\">Clone</button>\\n  </div>\\n</form>\\n'},useData:!0}),module.exports.includes.apps.line=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<li class=\"'+o(l(null!=(s=null!=e?e.model:e)?s.type:s,e))+'\">'+o(l(null!=(s=null!=e?e.model:e)?s.message:s,e))+\"</li>\\n\"},useData:!0}),module.exports.includes.apps.refs=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<form>\\n  <p>Choose a ref from the list below:</p>\\n  <hr>\\n  <fieldset data-hook=\"field-container\"></fieldset>\\n  <hr>\\n  <div class=\"buttons\">\\n    <button class=\"btn btn-default\" data-hook=\"cancel-button\" type=\"button\">Cancel</button>\\n    <button class=\"btn btn-primary\" data-hook=\"submit-button\" type=\"submit\">Set</button>\\n  </div>\\n</form>\\n'},useData:!0}),module.exports.includes.apps.setting=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<ul data-hook=\"setting-log\" class=\"install-log\"></ul>\\n'},useData:!0}),module.exports.includes.confirm=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<p data-hook=\"message\"></p>\\n'},useData:!0}),module.exports.includes.host={},module.exports.includes.host.resources=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"panel panel-primary\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">Resource usage</h4>\\n  </div>\\n  <div class=\"panel-body resource-data\">\\n    <div class=\"resource-data-graph\" data-hook=\"cpu-usage\"></div>\\n    <div class=\"resource-data-graph\" data-hook=\"memory-usage\"></div>\\n  </div>\\n</div>'},useData:!0}),module.exports.includes.host.system=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<div class=\"panel panel-primary table-panel system\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">Vital statistics</h4>\\n  </div>\\n  <div class=\"panel-body\">\\n    <table class=\"table table-striped system-details\">\\n      <thead>\\n        <tr>\\n          <th class=\"hostname\">Hostname</th>\\n          <th class=\"platform\">Platform</th>\\n          <th class=\"arch\">Arch</th>\\n          <th class=\"release\">Release</th>\\n          <th class=\"guvnor\">Guvnor</th>\\n          <th class=\"engine\">Engine</th>\\n          <th class=\"uptime\">Uptime</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td class=\"hostname\">'+o(l(null!=(s=null!=e?e.model:e)?s.hostname:s,e))+'</td>\\n          <td class=\"platform\">'+o(l(null!=(s=null!=e?e.model:e)?s.platform:s,e))+'</td>\\n          <td class=\"arch\">'+o(l(null!=(s=null!=e?e.model:e)?s.arch:s,e))+'</td>\\n          <td class=\"release\">'+o(l(null!=(s=null!=e?e.model:e)?s.release:s,e))+'</td>\\n          <td class=\"guvnor\">'+o(l(null!=(s=null!=e?e.model:e)?s.guvnor:s,e))+'</td>\\n          <td class=\"engine\">'+o(l(null!=(s=null!=e?e.model:e)?s.engine:s,e))+'</td>\\n          <td class=\"uptime\" data-hook=\"uptime\">'+o(l(null!=(s=null!=e?e.model:e)?s.uptimeFormatted:s,e))+\"</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\"},useData:!0}),module.exports.includes.hostlist={},module.exports.includes.hostlist.process=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<ul class=\"process\">\\n  <li class=\"processName\"><a href=\"/host/'+o(l(null!=(s=null!=(s=null!=(s=null!=e?e.model:e)?s.collection:s)?s.parent:s)?s.name:s,e))+\"/process/\"+o(l(null!=(s=null!=e?e.model:e)?s.id:s,e))+'\"><i data-hook=\"process-icon\"></i> <span data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</span></a></li>\\n  <li class=\"processLogs\"><a href=\"/host/'+o(l(null!=(s=null!=(s=null!=(s=null!=e?e.model:e)?s.collection:s)?s.parent:s)?s.name:s,e))+\"/process/\"+o(l(null!=(s=null!=e?e.model:e)?s.id:s,e))+'/logs\"><i class=\"fa fa-book\"></i> Logs</a></li>\\n  <li class=\"processExceptions\"><a href=\"/host/'+o(l(null!=(s=null!=(s=null!=(s=null!=e?e.model:e)?s.collection:s)?s.parent:s)?s.name:s,e))+\"/process/\"+o(l(null!=(s=null!=e?e.model:e)?s.id:s,e))+'/exceptions\"><i class=\"fa fa-exclamation-triangle\"></i> Exceptions</a></li>\\n  <li class=\"processSnapshots\"><a href=\"/host/'+o(l(null!=(s=null!=(s=null!=(s=null!=e?e.model:e)?s.collection:s)?s.parent:s)?s.name:s,e))+\"/process/\"+o(l(null!=(s=null!=e?e.model:e)?s.id:s,e))+'/snapshots\"><i class=\"fa fa-bar-chart\"></i> Snapshots</a></li>\\n</ul>\\n'},useData:!0}),module.exports.includes.hostlist.host=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<li class=\"host-name\">\\n  <ul>\\n    <li><a href=\"/host/'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'\"><i data-hook=\"host-icon\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</a></li>\\n    <li class=\"processes\"><a href=\"/host/'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'/apps\"><i class=\"fa fa-code-fork\"></i> Apps</a></li>\\n    <li class=\"processes\"><a href=\"/host/'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'/processes\"><i class=\"fa fa-tasks\"></i> Processes</a></li>\\n    <li class=\"process-list\" data-hook=\"process-list\"></li>\\n  </ul>\\n</li>\\n'},useData:!0}),module.exports.includes.modal=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\\n  <div class=\"modal-dialog\">\\n    <div class=\"modal-content\">\\n      <div class=\"modal-header\">\\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" data-hook=\"close-button\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\\n        <h4 class=\"modal-title\" data-hook=\"title\"></h4>\\n      </div>\\n      <div class=\"modal-body\" data-hook=\"modal-content\">\\n      </div>\\n      <div class=\"modal-footer\" data-hook=\"modal-buttons\">\\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" data-hook=\"cancel-button\">Close</button>\\n        <button type=\"button\" class=\"btn btn-primary\" data-hook=\"ok-button\">Save changes</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.includes.process={},module.exports.includes.process.exceptionlist={},module.exports.includes.process.exceptionlist.empty=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return\"<p>No exceptions have been thrown</p>\\n\"},useData:!0}),module.exports.includes.process.exceptionlist.entry=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<ul>\\n  <li class=\"date\">'+o(l(null!=(s=null!=e?e.model:e)?s.dateFormatted:s,e))+'</li>\\n  <li class=\"code\">'+o(l(null!=(s=null!=e?e.model:e)?s.code:s,e))+'</li>\\n  <li class=\"message\">'+o(l(null!=(s=null!=e?e.model:e)?s.messageOrStackSummary:s,e))+'</li>\\n  <li class=\"stack\"><pre><code>'+o(l(null!=(s=null!=e?e.model:e)?s.stack:s,e))+\"</code></pre></li>\\n</ul>\\n\"},useData:!0}),module.exports.includes.process.logs=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<span data-hook=\"logs\"></span>\\n'},useData:!0}),module.exports.includes.process.loglist={},module.exports.includes.process.loglist.entry=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression,i='<li class=\"'+o(l(null!=(s=null!=e?e.model:e)?s.type:s,e))+' visible\"><span class=\"date\">'+o(l(null!=(s=null!=e?e.model:e)?s.dateFormatted:s,e))+\"</span>\";return s=l(null!=(s=null!=e?e.model:e)?s.messageFormatted:s,e),null!=s&&(i+=s),i+\"</li>\\n\"},useData:!0}),module.exports.includes.process.overview={},module.exports.includes.process.overview.cpu=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"panel panel-primary details\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">CPU usage</h4>\\n  </div>\\n  <div class=\"panel-body\">\\n    <div data-hook=\"cpu-usage\" style=\"width: 100%; height: 150px; margin: auto\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.includes.process.overview.latency=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"panel panel-primary details\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">Event loop latency</h4>\\n  </div>\\n  <div class=\"panel-body\">\\n    <div data-hook=\"latency-usage\" style=\"width: 100%; height: 150px; margin: auto\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.includes.process.overview.memory=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div class=\"panel panel-primary details\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">Memory usage</h4>\\n  </div>\\n  <div class=\"panel-body\">\\n    <div data-hook=\"memory-usage\" style=\"width: 100%; height: 200px; margin: auto\"></div>\\n  </div>\\n</div>\\n'},useData:!0}),module.exports.includes.process.overview.running=Handlebars.template({1:function(e,a,n,t){return'      <div data-hook=\"addworkerbutton\"></div>\\n      <div data-hook=\"removeworkerbutton\"></div>\\n'},compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression,i='<div class=\"panel panel-primary details\">\\n  <div class=\"panel-heading\">\\n    <h4 class=\"panel-title\">Vital statistics</h4>\\n  </div>\\n  <div class=\"panel-body\" data-hook=\"debugger-warning\">\\n    <div class=\"alert alert-warning\">\\n      '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" is running in debug mode, is paused and is waiting for a debugger to attach to port \"+o(l(null!=(s=null!=e?e.model:e)?s.debugPort:s,e))+'. Please click the debug button below.\\n    </div>\\n  </div>\\n  <div class=\"panel-body\" data-hook=\"running-information\">\\n    <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' has been running for <span data-hook=\"uptime\">'+o(l(null!=(s=null!=e?e.model:e)?s.uptimeFormatted:s,e))+'</span> with <span data-hook=\"restarts\">'+o(l(null!=(s=null!=e?e.model:e)?s.restarts:s,e))+'</span> restart(s).</p>\\n    <p>The current pid is <span data-hook=\"pid\">'+o(l(null!=(s=null!=e?e.model:e)?s.pid:s,e))+'</span> and it\\'s running as <span data-hook=\"user\">'+o(l(null!=(s=null!=e?e.model:e)?s.user:s,e))+'</span>:<span data-hook=\"group\">'+o(l(null!=(s=null!=e?e.model:e)?s.group:s,e))+'</span>.</p>\\n\\n    <div data-hook=\"gcbutton\"></div>\\n    <div data-hook=\"debugbutton\"></div>\\n    <div data-hook=\"restartbutton\"></div>\\n    <div data-hook=\"stopbutton\"></div>\\n\\n';return s=a[\"if\"].call(e,null!=(s=null!=e?e.model:e)?s.cluster:s,{name:\"if\",hash:{},fn:this.program(1,t),inverse:this.noop,data:t}),null!=s&&(i+=s),i+\"  </div>\\n</div>\\n\"},useData:!0}),module.exports.includes.process.snapshotlist={},module.exports.includes.process.snapshotlist.empty=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<tr>\\n  <td colspan=\"4\">No snapshots have been taken</td>\\n</tr>'},useData:!0}),module.exports.includes.process.snapshotlist.entry=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<tr>\\n  <td class=\"date\" data-hook=\"date\">Date</td>\\n  <td class=\"size\" data-hook=\"size\">Size</td>\\n  <td class=\"date\" data-hook=\"path\">Path</td>\\n  <td class=\"buttons\">\\n    <button type=\"button\" class=\"btn btn-default btn-xs start\" data-hook=\"downloadbutton\"><i class=\"fa fa-download\"></i> Download</button>\\n    <button type=\"button\" class=\"btn btn-danger btn-xs start\" data-hook=\"removebutton\"><i class=\"fa fa-remove\"></i> Remove</button>\\n  </td>\\n</tr>\\n'},useData:!0}),module.exports.includes.process.start=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<form data-hook=\"start-form\" class=\"start-form\">\\n  <fieldset data-hook=\"field-container\"></fieldset>\\n  <div class=\"buttons\">\\n    <button class=\"btn btn-default\" data-hook=\"cancel-button\" type=\"button\">Cancel</button>\\n    <button class=\"btn btn-primary\" data-hook=\"submit-button\" type=\"submit\">Start</button>\\n  </div>\\n</form>\\n'},useData:!0}),module.exports.includes.process.startOrRemove=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<div>\\n  <button type=\"button\" class=\"btn btn-success btn-xs process-start\" data-hook=\"startbutton\"><i class=\"fa fa-play\"></i> Start</button>\\n  <button type=\"button\" class=\"btn btn-danger btn-xs process-remove\" data-hook=\"removebutton\"><i class=\"fa fa-remove\"></i> Remove</button>\\n</div>\\n'},useData:!0}),module.exports.includes.processlist={},module.exports.includes.processlist.empty=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<tr>\\n  <td colspan=\"6\">There are no processes running</td>\\n</tr>\\n'},useData:!0}),module.exports.includes.processlist.process=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<tr>\\n  <td class=\"title\" data-hook=\"name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\"<br /><small>\"+o(l(null!=(s=null!=e?e.model:e)?s.script:s,e))+'</small></td>\\n  <td class=\"pid\" data-hook=\"pid\">'+o(l(null!=(s=null!=e?e.model:e)?s.pid:s,e))+'</td>\\n  <td class=\"uptime\" data-hook=\"uptime\">'+o(l(null!=(s=null!=e?e.model:e)?s.uptimeFormatted:s,e))+'</td>\\n  <td class=\"restarts\" data-hook=\"restarts\">'+o(l(null!=(s=null!=e?e.model:e)?s.restarts:s,e))+'</td>\\n  <td class=\"memory\" data-hook=\"memory\">'+o(l(null!=(s=null!=e?e.model:e)?s.memoryFormatted:s,e))+'</td>\\n  <td class=\"cpu\" data-hook=\"cpu\">'+o(l(null!=(s=null!=e?e.model:e)?s.cpuFormatted:s,e))+\"</td>\\n</tr>\\n\"},useData:!0}),module.exports.pages={},module.exports.pages.host={},module.exports.pages.host.apps=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary table-panel apps\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Apps</h4>\\n          <button type=\"button\" class=\"btn btn-default btn-xs install-button\" data-hook=\"installbutton\"><i class=\"fa fa-cloud-download\"></i> Install</button>\\n        </div>\\n        <div class=\"panel-body\">\\n          <table class=\"table table-striped apps-list\">\\n            <thead>\\n              <tr>\\n                <th class=\"name\">Name</th>\\n                <th class=\"user\">User</th>\\n                <th class=\"ref\">Ref</th>\\n                <th class=\"url\">URL</th>\\n                <td class=\"remove\">&nbsp;</td>\\n              </tr>\\n            </thead>\\n            <tbody data-hook=\"apps\"></tbody>\\n          </table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.host.badsignature=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page badsignature\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' - message signature was invalid</h4>\\n    <p>This usually means that you did not configure guvnor-web correctly.</p>\\n    <p>Please see the <a href=\"https://github.com/tableflip/guvnor-web#step-3-still-on-the-guvnor-machine-add-a-remote-user\">README entry about adding remote users</a>.</p>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.host.connecting=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<div class=\"alert alert-info\" role=\"alert\">Connecting to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\"...</div>\\n\"},useData:!0}),module.exports.pages.host.connectionrefused=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page badsignature\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" - connection refused</h4>\\n    <p>Is guvnor running on the remote machine?</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.connectionreset=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page badsignature\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" - connection reset</h4>\\n    <p>Has something disrupted your network conneciton?</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.connectiontimedout=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<div class=\"alert alert-danger\" role=\"alert\">\\n  <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\"</h4>\\n  <p>Connection timed out, will attempt to reconnect shortly.</p>\\n</div>\\n\"},useData:!0}),module.exports.pages.host.error=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page error\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" encounterd an error</h4>\\n    <p>Sorry it didn't work out. Maybe check the logs?</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.errorconnecting=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page error\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\"</h4>\\n    <p>Sorry it didn't work out. Maybe check the logs?</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.hostnotfound=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page badsignature\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Could not connect to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" - host not found</h4>\\n    <p>Either the configured hostname is wrong or your DNS is b0rked</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.incompatible=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=\"function\",o=a.helperMissing,i=this.escapeExpression;return'<section class=\"page incompatible\">\\n  <div class=\"alert alert-danger\">\\n    <p><strong>'+i((s=null!=(s=a.name||(null!=e?e.name:e))?s:o,typeof s===l?s.call(e,{name:\"name\",hash:{},data:t}):s))+' is running a version of guvnor incompatible with this version of guvnor-web</strong></p>\\n    <p>Please run a version that <a href=\"http://semver.org/\">satisfies</a> '+i((s=null!=(s=a.requiredVersion||(null!=e?e.requiredVersion:e))?s:o,typeof s===l?s.call(e,{name:\"requiredVersion\",hash:{},data:t}):s))+\".</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.install=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Install app</h4>\\n        </div>\\n        <div class=\"panel-body\" data-hook=\"view\">\\n          <form data-hook=\"install-form\">\\n            <fieldset data-hook=\"field-container\"></fieldset>\\n            <div class=\"buttons\">\\n              <button class=\"btn btn-default btn-sm\" data-hook=\"reset\" type=\"submit\">Submit</button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.host.networkdown=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page timeout\">\\n  <div class=\"alert alert-danger\" role=\"alert\">\\n    <h4>Connection to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" lost</h4>\\n    <p>Your network connection went down.</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.host.processes=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary table-panel processes\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Processes</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <table class=\"table table-striped table-hover process-list\">\\n            <thead>\\n            <tr>\\n              <th class=\"title\">Title</th>\\n              <th class=\"pid\">Pid</th>\\n              <th class=\"uptime\">Uptime</th>\\n              <th class=\"restarts\">Restarts</th>\\n              <th class=\"memory\">Memory</th>\\n              <th class=\"cpu\">CPU</th>\\n            </tr>\\n            </thead>\\n            <tbody data-hook=\"processes\"></tbody>\\n          </table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.host.overview=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page host\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <span data-hook=\"system\"></span>\\n      <span data-hook=\"resources\"></span>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.host.timeout=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page timeout\">\\n  <div class=\"alert alert-warning\" role=\"alert\">\\n    <h4>Connection to '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" lost</h4>\\n    <p>Connection timed out.</p>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.loadinghosts=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<section class=\"page loadinghosts\">\\n  <div class=\"alert alert-info\" role=\"alert\">Waiting for hosts...</div>\\n</section>\\n'},useData:!0}),module.exports.pages.nohosts=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<section class=\"page nohosts\">\\n  <div class=\"alert alert-warning\" role=\"alert\">\\n    <strong>No hosts to show</strong> Please configure some hosts in your guvnor-web config file.\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process={},module.exports.pages.process.aborted=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Aborted</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <div class=\"alert alert-danger\">\\n            <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' was aborted because it failed to start too many times.</p>\\n            <p>Please use the logs and exception tabs to diagnose the problem and the start button to try again.</p>\\n          </div>\\n          <div data-hook=\"startbutton\"></div>\\n          <div data-hook=\"removebutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n';\n},useData:!0}),module.exports.pages.process.errored=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Errored</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <div class=\"alert alert-danger\">\\n            <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' errored.</p>\\n            <p>This means an error was thrown by your module.</p>\\n            <p>Please check the exception list or logs for more information.</p>\\n          </div>\\n          <div data-hook=\"startbutton\"></div>\\n          <div data-hook=\"removebutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.exceptions=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary table-panel exceptions\">\\n        <div class=\"panel-heading panel-heading-exceptions\">\\n          <h4 class=\"panel-title\">Exceptions</h4>\\n        </div>\\n        <div class=\"panel-body panel-exceptions\">\\n          <ul class=\"exceptions\" data-hook=\"exception-list\">\\n            <li class=\"date\">Date</li>\\n            <li class=\"code\">Code</li>\\n            <li class=\"message\">Message</li>\\n            <li class=\"list\" data-hook=\"exceptions\"></li>\\n          </ul>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.failed=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Failed</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <div class=\"alert alert-danger\">\\n            <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' failed to initialise.</p>\\n            <p>This usually means something was wrong with the process configuration.</p>\\n            <p>Please double check the script path, current working directory, user/group, etc.</p>\\n          </div>\\n          <div data-hook=\"startbutton\"></div>\\n          <div data-hook=\"removebutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.logs=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary logs\">\\n        <div class=\"panel-heading panel-heading-logs\">\\n          <h4 class=\"panel-title\">Logs</h4>\\n          <button type=\"button\" class=\"btn btn-default btn-xs logs-clear\"><i class=\"fa fa-trash\"></i> Clear</button>\\n          <button type=\"button\" class=\"btn btn-default btn-xs logs-time active\"><i class=\"fa fa-calendar\"></i> Time</button>\\n          <button type=\"button\" class=\"btn btn-default btn-xs logs-pin active\"><i class=\"fa fa-paperclip\"></i> Pin</button>\\n        </div>\\n        <div class=\"panel-body panel-logs\">\\n          <ul class=\"logs showTimes\" data-hook=\"logs\"></ul>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.overview=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div data-hook=\"details\"></div>\\n      <div data-hook=\"memory\"></div>\\n      <div data-hook=\"cpu\"></div>\\n      <div data-hook=\"latency\"></div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.paused=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Paused</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <div class=\"alert alert-warning\">\\n            '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" is running in debug mode, is paused and is waiting for a debugger to attach to port \"+o(l(null!=(s=null!=e?e.model:e)?s.debugPort:s,e))+'. Please click the debug button below.\\n          </div>\\n          <button type=\"button\" class=\"btn btn-default btn-xs process-debug\"><i class=\"fa fa-bug\"></i> Debug</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.restarting=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Starting</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p><i class=\"fa fa-circle-o-notch fa-spin\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" restarting...</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.process.snapshots=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page process\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1 data-hook=\"process-name\">'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary table-panel exceptions\">\\n        <div class=\"panel-heading panel-heading-exceptions\">\\n          <h4 class=\"panel-title\">Heap snapshots</h4>\\n          <div data-hook=\"snapshotbutton\"></div>\\n        </div>\\n        <div class=\"panel-body panel-exceptions\">\\n          <table class=\"table table-striped snapshot-list\">\\n            <thead>\\n            <tr>\\n              <th class=\"name\">Date</th>\\n              <th class=\"size\">Size</th>\\n              <th class=\"path\">Path</th>\\n              <td class=\"buttons\">&nbsp;</td>\\n            </tr>\\n            </thead>\\n            <tbody data-hook=\"snapshots\"></tbody>\\n          </table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.started=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Started</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p><i class=\"fa fa-circle-o-notch fa-spin\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" started...</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.process.starting=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Starting</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p><i class=\"fa fa-circle-o-notch fa-spin\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' starting...</p>\\n          <div data-hook=\"stopbutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.stopped=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Stopped</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' is not running.</p>\\n          <div data-hook=\"startbutton\"></div>\\n          <div data-hook=\"removebutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.pages.process.stopping=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Starting</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p><i class=\"fa fa-circle-o-notch fa-spin\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" stopping...</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.process.uninitialised=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Starting</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p><i class=\"fa fa-circle-o-notch fa-spin\"></i> '+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+\" uninitialised...</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\"},useData:!0}),module.exports.pages.process.unresponsive=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){var s,l=this.lambda,o=this.escapeExpression;return'<section class=\"page processes\">\\n  <div class=\"row\">\\n    <div class=\"col-md-12\">\\n      <h1>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+'</h1>\\n      <div class=\"panel panel-primary\">\\n        <div class=\"panel-heading\">\\n          <h4 class=\"panel-title\">Unresponsive</h4>\\n        </div>\\n        <div class=\"panel-body\">\\n          <p>'+o(l(null!=(s=null!=e?e.model:e)?s.name:s,e))+' is unresponsive. You may try to debug, restart or stop the process.</p>\\n          <div data-hook=\"debugbutton\"></div>\\n          <div data-hook=\"restartbutton\"></div>\\n          <div data-hook=\"stopbutton\"></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n'},useData:!0}),module.exports.includes.process.exceptions=Handlebars.template({compiler:[6,\">= 2.0.0-beta.1\"],main:function(e,a,n,t){return'<span data-hook=\"exceptions\"></span>\\n'},useData:!0});"}